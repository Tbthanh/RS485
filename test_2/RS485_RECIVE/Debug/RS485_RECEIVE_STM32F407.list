
RS485_RECEIVE_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000994  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a10  20000a10  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018ca0  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e6f  00000000  00000000  00038d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d0  00000000  00000000  0003cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f46  00000000  00000000  0003dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000244ce  00000000  00000000  0003ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb42  00000000  00000000  000633e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd850  00000000  00000000  0007ef26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005628  00000000  00000000  0014c778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  00151da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e44 	.word	0x08008e44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008e44 	.word	0x08008e44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fca8 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81c 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f942 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f882 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f8ae 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8dc 	bl	8000698 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f008 f85c 	bl	800859c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f90e 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 16);
 80004e8:	2210      	movs	r2, #16
 80004ea:	4905      	ldr	r1, [pc, #20]	; (8000500 <main+0x3c>)
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x40>)
 80004ee:	f004 f921 	bl	8004734 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f008 f879 	bl	80085e8 <MX_USB_HOST_Process>
    HAL_Delay(1000);
 80004f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fa:	f000 fd01 	bl	8000f00 <HAL_Delay>
    MX_USB_HOST_Process();
 80004fe:	e7f8      	b.n	80004f2 <main+0x2e>
 8000500:	200001d0 	.word	0x200001d0
 8000504:	2000018c 	.word	0x2000018c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fc04 	bl	8008d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa22 	bl	80039d8 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 fa01 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fc83 	bl	8003ec8 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9ea 	bl	80009a0 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fbf9 	bl	8002e10 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9bc 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000098 	.word	0x20000098
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2S3_Init+0x54>)
 8000678:	f002 fd0e 	bl	8003098 <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f98d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000ec 	.word	0x200000ec
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f003 ff4d 	bl	8004588 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f954 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000134 	.word	0x20000134
 8000700:	40013000 	.word	0x40013000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f003 ffad 	bl	800469a <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f92b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000018c 	.word	0x2000018c
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b7b      	ldr	r3, [pc, #492]	; (8000960 <MX_GPIO_Init+0x208>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a7a      	ldr	r2, [pc, #488]	; (8000960 <MX_GPIO_Init+0x208>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b78      	ldr	r3, [pc, #480]	; (8000960 <MX_GPIO_Init+0x208>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b74      	ldr	r3, [pc, #464]	; (8000960 <MX_GPIO_Init+0x208>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a73      	ldr	r2, [pc, #460]	; (8000960 <MX_GPIO_Init+0x208>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b71      	ldr	r3, [pc, #452]	; (8000960 <MX_GPIO_Init+0x208>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <MX_GPIO_Init+0x208>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a6c      	ldr	r2, [pc, #432]	; (8000960 <MX_GPIO_Init+0x208>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6a      	ldr	r3, [pc, #424]	; (8000960 <MX_GPIO_Init+0x208>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <MX_GPIO_Init+0x208>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a65      	ldr	r2, [pc, #404]	; (8000960 <MX_GPIO_Init+0x208>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b63      	ldr	r3, [pc, #396]	; (8000960 <MX_GPIO_Init+0x208>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <MX_GPIO_Init+0x208>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a5e      	ldr	r2, [pc, #376]	; (8000960 <MX_GPIO_Init+0x208>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <MX_GPIO_Init+0x208>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <MX_GPIO_Init+0x208>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a57      	ldr	r2, [pc, #348]	; (8000960 <MX_GPIO_Init+0x208>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <MX_GPIO_Init+0x208>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4852      	ldr	r0, [pc, #328]	; (8000964 <MX_GPIO_Init+0x20c>)
 800081c:	f000 fed4 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4850      	ldr	r0, [pc, #320]	; (8000968 <MX_GPIO_Init+0x210>)
 8000826:	f000 fecf 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2102      	movs	r1, #2
 800082e:	484f      	ldr	r0, [pc, #316]	; (800096c <MX_GPIO_Init+0x214>)
 8000830:	f000 feca 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000834:	2200      	movs	r2, #0
 8000836:	f24f 0110 	movw	r1, #61456	; 0xf010
 800083a:	484d      	ldr	r0, [pc, #308]	; (8000970 <MX_GPIO_Init+0x218>)
 800083c:	f000 fec4 	bl	80015c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000840:	2308      	movs	r3, #8
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4843      	ldr	r0, [pc, #268]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000858:	f000 fd1a 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	483d      	ldr	r0, [pc, #244]	; (8000968 <MX_GPIO_Init+0x210>)
 8000874:	f000 fd0c 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000878:	2308      	movs	r3, #8
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000888:	2305      	movs	r3, #5
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4835      	ldr	r0, [pc, #212]	; (8000968 <MX_GPIO_Init+0x210>)
 8000894:	f000 fcfc 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	482f      	ldr	r0, [pc, #188]	; (800096c <MX_GPIO_Init+0x214>)
 80008ae:	f000 fcef 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4828      	ldr	r0, [pc, #160]	; (800096c <MX_GPIO_Init+0x214>)
 80008ca:	f000 fce1 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ce:	2304      	movs	r3, #4
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4824      	ldr	r0, [pc, #144]	; (8000974 <MX_GPIO_Init+0x21c>)
 80008e2:	f000 fcd5 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_GPIO_Init+0x21c>)
 8000904:	f000 fcc4 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000908:	f24f 0310 	movw	r3, #61456	; 0xf010
 800090c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_GPIO_Init+0x218>)
 8000922:	f000 fcb5 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_GPIO_Init+0x218>)
 800093a:	f000 fca9 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000942:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000954:	f000 fc9c 	bl	8001290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40021000 	.word	0x40021000
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40020400 	.word	0x40020400

08000978 <HAL_UARTEx_RxEventCallback>:
  * @brief UARTEx Event Callback
  * @param None
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 16);
 8000984:	2210      	movs	r2, #16
 8000986:	4904      	ldr	r1, [pc, #16]	; (8000998 <HAL_UARTEx_RxEventCallback+0x20>)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <HAL_UARTEx_RxEventCallback+0x24>)
 800098a:	f003 fed3 	bl	8004734 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001d0 	.word	0x200001d0
 800099c:	2000018c 	.word	0x2000018c

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ea:	2007      	movs	r0, #7
 80009ec:	f000 fb7c 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_I2C_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12c      	bne.n	8000a78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	2312      	movs	r3, #18
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <HAL_I2C_MspInit+0x8c>)
 8000a58:	f000 fc1a 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400

08000a8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <HAL_I2S_MspInit+0xf0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d15a      	bne.n	8000b72 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fc1b 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ad8:	f7ff ff62 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_I2S_MspInit+0xf4>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b30:	2310      	movs	r3, #16
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b40:	2306      	movs	r3, #6
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <HAL_I2S_MspInit+0xf8>)
 8000b4c:	f000 fba0 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b62:	2306      	movs	r3, #6
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_I2S_MspInit+0xfc>)
 8000b6e:	f000 fb8f 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3738      	adds	r7, #56	; 0x38
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40003c00 	.word	0x40003c00
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020800 	.word	0x40020800

08000b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_SPI_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000be6:	23e0      	movs	r3, #224	; 0xe0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_SPI_MspInit+0x8c>)
 8000c02:	f000 fb45 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0x94>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d133      	bne.n	8000ca6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_UART_MspInit+0x9c>)
 8000c92:	f000 fafd 	bl	8001290 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2026      	movs	r0, #38	; 0x26
 8000c9c:	f000 fa2f 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca0:	2026      	movs	r0, #38	; 0x26
 8000ca2:	f000 fa48 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8da 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <USART2_IRQHandler+0x10>)
 8000d16:	f003 fd73 	bl	8004800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000018c 	.word	0x2000018c

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f000 fed1 	bl	8001ad0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200005c4 	.word	0x200005c4

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f007 fff4 	bl	8008d54 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200001e0 	.word	0x200001e0
 8000da0:	20000a10 	.word	0x20000a10

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f007 ffb3 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb63 	bl	80004c4 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e0c:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 8000e10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e14:	20000a10 	.word	0x20000a10

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fdac 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001e4 	.word	0x200001e4

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001e4 	.word	0x200001e4

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff feb6 	bl	8000ee8 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d008      	beq.n	800119c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e052      	b.n	8001242 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0216 	bic.w	r2, r2, #22
 80011aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <HAL_DMA_Abort+0x62>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0208 	bic.w	r2, r2, #8
 80011da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ec:	e013      	b.n	8001216 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ee:	f7ff fe7b 	bl	8000ee8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d90c      	bls.n	8001216 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2220      	movs	r2, #32
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e015      	b.n	8001242 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e4      	bne.n	80011ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	223f      	movs	r2, #63	; 0x3f
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d004      	beq.n	8001268 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e00c      	b.n	8001282 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2205      	movs	r2, #5
 800126c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e16b      	b.n	8001584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 815a 	bne.w	800157e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80b4 	beq.w	800157e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a5f      	ldr	r2, [pc, #380]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a5b      	ldr	r2, [pc, #364]	; (80015a0 <HAL_GPIO_Init+0x310>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_GPIO_Init+0x314>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d02b      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x318>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d025      	beq.n	80014b2 <HAL_GPIO_Init+0x222>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_GPIO_Init+0x31c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01f      	beq.n	80014ae <HAL_GPIO_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <HAL_GPIO_Init+0x320>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_GPIO_Init+0x21a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x216>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4d      	ldr	r2, [pc, #308]	; (80015b8 <HAL_GPIO_Init+0x328>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x212>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	; (80015bc <HAL_GPIO_Init+0x32c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x20e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4b      	ldr	r2, [pc, #300]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x20a>
 8001496:	2307      	movs	r3, #7
 8001498:	e00e      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 800149a:	2308      	movs	r3, #8
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 800149e:	2306      	movs	r3, #6
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014b6:	2300      	movs	r3, #0
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <HAL_GPIO_Init+0x310>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	f67f ae90 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40021400 	.word	0x40021400
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40021c00 	.word	0x40021c00
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fc:	b08f      	sub	sp, #60	; 0x3c
 80015fe:	af0a      	add	r7, sp, #40	; 0x28
 8001600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e054      	b.n	80016b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f007 f816 	bl	8008658 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f004 f842 	bl	80056d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	687e      	ldr	r6, [r7, #4]
 8001658:	466d      	mov	r5, sp
 800165a:	f106 0410 	add.w	r4, r6, #16
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800166a:	e885 0003 	stmia.w	r5, {r0, r1}
 800166e:	1d33      	adds	r3, r6, #4
 8001670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f003 ffbc 	bl	80055f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f004 f839 	bl	80056f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	687e      	ldr	r6, [r7, #4]
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169e:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a2:	1d33      	adds	r3, r6, #4
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f004 f9c2 	bl	8005a30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016be:	b590      	push	{r4, r7, lr}
 80016c0:	b089      	sub	sp, #36	; 0x24
 80016c2:	af04      	add	r7, sp, #16
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	4608      	mov	r0, r1
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	70fb      	strb	r3, [r7, #3]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70bb      	strb	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_HCD_HC_Init+0x28>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e076      	b.n	80017d4 <HAL_HCD_HC_Init+0x116>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	333d      	adds	r3, #61	; 0x3d
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3338      	adds	r3, #56	; 0x38
 800170e:	787a      	ldrb	r2, [r7, #1]
 8001710:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3340      	adds	r3, #64	; 0x40
 8001720:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001722:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3339      	adds	r3, #57	; 0x39
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333f      	adds	r3, #63	; 0x3f
 8001744:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	78ba      	ldrb	r2, [r7, #2]
 800174e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001752:	b2d0      	uxtb	r0, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	333a      	adds	r3, #58	; 0x3a
 8001760:	4602      	mov	r2, r0
 8001762:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001764:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da09      	bge.n	8001780 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	333b      	adds	r3, #59	; 0x3b
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e008      	b.n	8001792 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	333b      	adds	r3, #59	; 0x3b
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	333c      	adds	r3, #60	; 0x3c
 80017a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	787c      	ldrb	r4, [r7, #1]
 80017ac:	78ba      	ldrb	r2, [r7, #2]
 80017ae:	78f9      	ldrb	r1, [r7, #3]
 80017b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4623      	mov	r3, r4
 80017c2:	f004 fabb 	bl	8005d3c <USB_HC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}

080017dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_HC_Halt+0x1e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00f      	b.n	800181a <HAL_HCD_HC_Halt+0x3e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fd0b 	bl	8006226 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	70fb      	strb	r3, [r7, #3]
 8001836:	460b      	mov	r3, r1
 8001838:	70bb      	strb	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	333b      	adds	r3, #59	; 0x3b
 800184c:	78ba      	ldrb	r2, [r7, #2]
 800184e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	333f      	adds	r3, #63	; 0x3f
 800185e:	787a      	ldrb	r2, [r7, #1]
 8001860:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001862:	7c3b      	ldrb	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d112      	bne.n	800188e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3342      	adds	r3, #66	; 0x42
 8001876:	2203      	movs	r2, #3
 8001878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	333d      	adds	r3, #61	; 0x3d
 8001888:	7f3a      	ldrb	r2, [r7, #28]
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e008      	b.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3342      	adds	r3, #66	; 0x42
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	f200 80c6 	bhi.w	8001a34 <HAL_HCD_HC_SubmitRequest+0x210>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	08001a21 	.word	0x08001a21
 80018b8:	08001925 	.word	0x08001925
 80018bc:	080019a3 	.word	0x080019a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018c0:	7c3b      	ldrb	r3, [r7, #16]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	f040 80b8 	bne.w	8001a38 <HAL_HCD_HC_SubmitRequest+0x214>
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80b4 	bne.w	8001a38 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018d0:	8b3b      	ldrh	r3, [r7, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d108      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3355      	adds	r3, #85	; 0x55
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3355      	adds	r3, #85	; 0x55
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800190e:	e093      	b.n	8001a38 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e089      	b.n	8001a38 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11d      	bne.n	8001966 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3355      	adds	r3, #85	; 0x55
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3342      	adds	r3, #66	; 0x42
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001950:	e073      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3342      	adds	r3, #66	; 0x42
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
      break;
 8001964:	e069      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3354      	adds	r3, #84	; 0x54
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e055      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3342      	adds	r3, #66	; 0x42
 800199c:	2202      	movs	r2, #2
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e04b      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11d      	bne.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3355      	adds	r3, #85	; 0x55
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ce:	e034      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e02a      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3354      	adds	r3, #84	; 0x54
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e016      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
      break;
 8001a1e:	e00c      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a34:	bf00      	nop
 8001a36:	e000      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a38:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	8b3a      	ldrh	r2, [r7, #24]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	202c      	movs	r0, #44	; 0x2c
 8001a54:	fb00 f303 	mul.w	r3, r0, r3
 8001a58:	440b      	add	r3, r1
 8001a5a:	334c      	adds	r3, #76	; 0x4c
 8001a5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3360      	adds	r3, #96	; 0x60
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3350      	adds	r3, #80	; 0x50
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3339      	adds	r3, #57	; 0x39
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3361      	adds	r3, #97	; 0x61
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	222c      	movs	r2, #44	; 0x2c
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	3338      	adds	r3, #56	; 0x38
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	18d1      	adds	r1, r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f004 fa5e 	bl	8005f80 <USB_HC_StartXfer>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop

08001ad0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 ff5f 	bl	80059aa <USB_GetMode>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 80f6 	bne.w	8001ce0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 ff43 	bl	8005984 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80ec 	beq.w	8001cde <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 ff3a 	bl	8005984 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b1a:	d104      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 ff2a 	bl	8005984 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b3a:	d104      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 ff1a 	bl	8005984 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b5a:	d104      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 ff0a 	bl	8005984 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d103      	bne.n	8001b82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fefc 	bl	8005984 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b96:	d11c      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ba0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f003 fdeb 	bl	8005790 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bba:	6938      	ldr	r0, [r7, #16]
 8001bbc:	f003 fe1c 	bl	80057f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fff2 	bl	8005bb0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f006 fdc1 	bl	8008754 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fed4 	bl	8005984 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be6:	d102      	bne.n	8001bee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f001 f89e 	bl	8002d2a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fec6 	bl	8005984 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d106      	bne.n	8001c10 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f006 fd8a 	bl	800871c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 feb5 	bl	8005984 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d101      	bne.n	8001c28 <HAL_HCD_IRQHandler+0x158>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_HCD_IRQHandler+0x15a>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0210 	bic.w	r2, r2, #16
 8001c3c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 ffa1 	bl	8002b86 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0210 	orr.w	r2, r2, #16
 8001c52:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fe93 	bl	8005984 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c68:	d13a      	bne.n	8001ce0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fac8 	bl	8006204 <USB_HC_ReadInterrupt>
 8001c74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e025      	b.n	8001cc8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ab 	bl	8001e0a <HCD_HC_IN_IRQHandler>
 8001cb4:	e005      	b.n	8001cc2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fbf9 	bl	80024b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3d4      	bcc.n	8001c7c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	615a      	str	r2, [r3, #20]
 8001cdc:	e000      	b.n	8001ce0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cde:	bf00      	nop
    }
  }
}
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_HCD_Start+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e013      	b.n	8001d24 <HAL_HCD_Start+0x3e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 ffb4 	bl	8005c78 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fccc 	bl	80056b2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_HCD_Stop+0x16>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e00d      	b.n	8001d5e <HAL_HCD_Stop+0x32>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fba2 	bl	8006498 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 ff56 	bl	8005c24 <USB_ResetPort>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3360      	adds	r3, #96	; 0x60
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3350      	adds	r3, #80	; 0x50
 8001dc4:	681b      	ldr	r3, [r3, #0]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 ff9a 	bl	8005d18 <USB_GetCurrentFrame>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 ff75 	bl	8005cea <USB_GetHostSpeed>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d11a      	bne.n	8001e70 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	2304      	movs	r3, #4
 8001e4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3361      	adds	r3, #97	; 0x61
 8001e5a:	2206      	movs	r2, #6
 8001e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 f9dc 	bl	8006226 <USB_HC_Halt>
 8001e6e:	e0af      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d11b      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2207      	movs	r2, #7
 8001eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 f9b4 	bl	8006226 <USB_HC_Halt>
 8001ebe:	e087      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d109      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	6093      	str	r3, [r2, #8]
 8001ee8:	e072      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d11a      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2308      	movs	r3, #8
 8001f10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3361      	adds	r3, #97	; 0x61
 8001f20:	2205      	movs	r2, #5
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 f979 	bl	8006226 <USB_HC_Halt>
 8001f34:	e04c      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4c:	d11b      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3361      	adds	r3, #97	; 0x61
 8001f70:	2208      	movs	r2, #8
 8001f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f951 	bl	8006226 <USB_HC_Halt>
 8001f84:	e024      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d119      	bne.n	8001fd0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3361      	adds	r3, #97	; 0x61
 8001fbc:	2206      	movs	r2, #6
 8001fbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f92b 	bl	8006226 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe6:	d112      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 f917 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800200c:	e24e      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	f040 80df 	bne.w	80021e4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0159      	lsls	r1, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	440b      	add	r3, r1
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002050:	1ad2      	subs	r2, r2, r3
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	202c      	movs	r0, #44	; 0x2c
 8002058:	fb00 f303 	mul.w	r3, r0, r3
 800205c:	440b      	add	r3, r1
 800205e:	3350      	adds	r3, #80	; 0x50
 8002060:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3361      	adds	r3, #97	; 0x61
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	335c      	adds	r3, #92	; 0x5c
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	2301      	movs	r3, #1
 8002096:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	333f      	adds	r3, #63	; 0x3f
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	333f      	adds	r3, #63	; 0x3f
 80020ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d111      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 f8ab 	bl	8006226 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
 80020e2:	e03a      	b.n	800215a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d009      	beq.n	800210c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	333f      	adds	r3, #63	; 0x3f
 8002106:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002108:	2b01      	cmp	r3, #1
 800210a:	d126      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	0151      	lsls	r1, r2, #5
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	440a      	add	r2, r1
 8002122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3360      	adds	r3, #96	; 0x60
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	b2d9      	uxtb	r1, r3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	202c      	movs	r0, #44	; 0x2c
 8002148:	fb00 f303 	mul.w	r3, r0, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f006 fb0b 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d12b      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3348      	adds	r3, #72	; 0x48
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	202c      	movs	r0, #44	; 0x2c
 8002178:	fb00 f202 	mul.w	r2, r0, r2
 800217c:	440a      	add	r2, r1
 800217e:	3240      	adds	r2, #64	; 0x40
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	fbb3 f3f2 	udiv	r3, r3, r2
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 818e 	beq.w	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3354      	adds	r3, #84	; 0x54
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2d8      	uxtb	r0, r3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3354      	adds	r3, #84	; 0x54
 80021b4:	4602      	mov	r2, r0
 80021b6:	701a      	strb	r2, [r3, #0]
}
 80021b8:	e178      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3354      	adds	r3, #84	; 0x54
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3354      	adds	r3, #84	; 0x54
 80021de:	4602      	mov	r2, r0
 80021e0:	701a      	strb	r2, [r3, #0]
}
 80021e2:	e163      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 80f6 	bne.w	80023e8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3361      	adds	r3, #97	; 0x61
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d109      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3360      	adds	r3, #96	; 0x60
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e0c9      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3361      	adds	r3, #97	; 0x61
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d109      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3360      	adds	r3, #96	; 0x60
 8002246:	2205      	movs	r2, #5
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e0b5      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b06      	cmp	r3, #6
 800225e:	d009      	beq.n	8002274 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3361      	adds	r3, #97	; 0x61
 800226e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002270:	2b08      	cmp	r3, #8
 8002272:	d150      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	335c      	adds	r3, #92	; 0x5c
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	202c      	movs	r0, #44	; 0x2c
 800228c:	fb00 f303 	mul.w	r3, r0, r3
 8002290:	440b      	add	r3, r1
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	335c      	adds	r3, #92	; 0x5c
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d912      	bls.n	80022d0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	335c      	adds	r3, #92	; 0x5c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	2204      	movs	r2, #4
 80022cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ce:	e073      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002300:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002314:	e050      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3361      	adds	r3, #97	; 0x61
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d122      	bne.n	8002370 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002352:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e023      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3361      	adds	r3, #97	; 0x61
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b07      	cmp	r3, #7
 8002382:	d119      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	335c      	adds	r3, #92	; 0x5c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	202c      	movs	r0, #44	; 0x2c
 800239c:	fb00 f303 	mul.w	r3, r0, r3
 80023a0:	440b      	add	r3, r1
 80023a2:	335c      	adds	r3, #92	; 0x5c
 80023a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3360      	adds	r3, #96	; 0x60
 80023b4:	2204      	movs	r2, #4
 80023b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	461a      	mov	r2, r3
 80023c6:	2302      	movs	r3, #2
 80023c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	fb00 f303 	mul.w	r3, r0, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3360      	adds	r3, #96	; 0x60
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f006 f9c5 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023e6:	e061      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d156      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	333f      	adds	r3, #63	; 0x3f
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d111      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	335c      	adds	r3, #92	; 0x5c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fef9 	bl	8006226 <USB_HC_Halt>
 8002434:	e031      	b.n	800249a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333f      	adds	r3, #63	; 0x3f
 8002458:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800245a:	2b02      	cmp	r3, #2
 800245c:	d11d      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d110      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	2203      	movs	r2, #3
 8002488:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fec6 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	2310      	movs	r3, #16
 80024aa:	6093      	str	r3, [r2, #8]
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11a      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2304      	movs	r3, #4
 80024f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3361      	adds	r3, #97	; 0x61
 8002504:	2206      	movs	r2, #6
 8002506:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fe87 	bl	8006226 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002518:	e331      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d12e      	bne.n	800258e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	2320      	movs	r3, #32
 8002540:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	333d      	adds	r3, #61	; 0x3d
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 8313 	bne.w	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	333d      	adds	r3, #61	; 0x3d
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3360      	adds	r3, #96	; 0x60
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fe4d 	bl	8006226 <USB_HC_Halt>
}
 800258c:	e2f7      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d112      	bne.n	80025cc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 fe2e 	bl	8006226 <USB_HC_Halt>
}
 80025ca:	e2d8      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d140      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d111      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	333d      	adds	r3, #61	; 0x3d
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2340      	movs	r3, #64	; 0x40
 800262c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fde2 	bl	8006226 <USB_HC_Halt>
}
 8002662:	e28c      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d12c      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3361      	adds	r3, #97	; 0x61
 8002688:	2204      	movs	r2, #4
 800268a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	333d      	adds	r3, #61	; 0x3d
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	335c      	adds	r3, #92	; 0x5c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 fdb3 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	6093      	str	r3, [r2, #8]
}
 80026d2:	e254      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d11a      	bne.n	8002720 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2308      	movs	r3, #8
 80026fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3361      	adds	r3, #97	; 0x61
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fd84 	bl	8006226 <USB_HC_Halt>
}
 800271e:	e22e      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b10      	cmp	r3, #16
 8002734:	d140      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3361      	adds	r3, #97	; 0x61
 8002756:	2203      	movs	r2, #3
 8002758:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333d      	adds	r3, #61	; 0x3d
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333c      	adds	r3, #60	; 0x3c
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	333d      	adds	r3, #61	; 0x3d
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fd41 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2310      	movs	r3, #16
 80027b4:	6093      	str	r3, [r2, #8]
}
 80027b6:	e1e2      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d164      	bne.n	8002898 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d111      	bne.n	80027fa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3361      	adds	r3, #97	; 0x61
 80027e4:	2206      	movs	r2, #6
 80027e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fd17 	bl	8006226 <USB_HC_Halt>
 80027f8:	e044      	b.n	8002884 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	202c      	movs	r0, #44	; 0x2c
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	440b      	add	r3, r1
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d920      	bls.n	8002872 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	335c      	adds	r3, #92	; 0x5c
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2204      	movs	r2, #4
 8002852:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	b2d9      	uxtb	r1, r3
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	202c      	movs	r0, #44	; 0x2c
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	4413      	add	r3, r2
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f005 ff80 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002870:	e008      	b.n	8002884 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3360      	adds	r3, #96	; 0x60
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	6093      	str	r3, [r2, #8]
}
 8002896:	e172      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d11b      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	2208      	movs	r2, #8
 80028c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fcaa 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e4:	6093      	str	r3, [r2, #8]
}
 80028e6:	e14a      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f040 813f 	bne.w	8002b7e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d17d      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333f      	adds	r3, #63	; 0x3f
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d00a      	beq.n	8002950 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	333f      	adds	r3, #63	; 0x3f
 8002948:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800294a:	2b03      	cmp	r3, #3
 800294c:	f040 8100 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d113      	bne.n	8002980 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3355      	adds	r3, #85	; 0x55
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f083 0301 	eor.w	r3, r3, #1
 800296c:	b2d8      	uxtb	r0, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3355      	adds	r3, #85	; 0x55
 800297c:	4602      	mov	r2, r0
 800297e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80e3 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	334c      	adds	r3, #76	; 0x4c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80d8 	beq.w	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	334c      	adds	r3, #76	; 0x4c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	fb00 f202 	mul.w	r2, r0, r2
 80029ba:	440a      	add	r2, r1
 80029bc:	3240      	adds	r2, #64	; 0x40
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	fb00 f202 	mul.w	r2, r0, r2
 80029ce:	440a      	add	r2, r1
 80029d0:	3240      	adds	r2, #64	; 0x40
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b5 	beq.w	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3355      	adds	r3, #85	; 0x55
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2d8      	uxtb	r0, r3
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3355      	adds	r3, #85	; 0x55
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e09f      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d109      	bne.n	8002a38 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e08b      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d109      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e077      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d109      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	2205      	movs	r2, #5
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e063      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d009      	beq.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3361      	adds	r3, #97	; 0x61
 8002aaa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d14f      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	335c      	adds	r3, #92	; 0x5c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	202c      	movs	r0, #44	; 0x2c
 8002ac8:	fb00 f303 	mul.w	r3, r0, r3
 8002acc:	440b      	add	r3, r1
 8002ace:	335c      	adds	r3, #92	; 0x5c
 8002ad0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d912      	bls.n	8002b0c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3360      	adds	r3, #96	; 0x60
 8002b06:	2204      	movs	r2, #4
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e021      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b34:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2302      	movs	r3, #2
 8002b60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	b2d9      	uxtb	r1, r3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	202c      	movs	r0, #44	; 0x2c
 8002b6c:	fb00 f303 	mul.w	r3, r0, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3360      	adds	r3, #96	; 0x60
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f005 fdf9 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b7e:	bf00      	nop
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b08a      	sub	sp, #40	; 0x28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	0c5b      	lsrs	r3, r3, #17
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d004      	beq.n	8002bcc <HCD_RXQLVL_IRQHandler+0x46>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	f000 80a9 	beq.w	8002d1c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bca:	e0aa      	b.n	8002d22 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a6 	beq.w	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 809b 	beq.w	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3350      	adds	r3, #80	; 0x50
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	441a      	add	r2, r3
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	202c      	movs	r0, #44	; 0x2c
 8002c04:	fb00 f303 	mul.w	r3, r0, r3
 8002c08:	440b      	add	r3, r1
 8002c0a:	334c      	adds	r3, #76	; 0x4c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d87a      	bhi.n	8002d08 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3344      	adds	r3, #68	; 0x44
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f002 fe52 	bl	80058d4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3344      	adds	r3, #68	; 0x44
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	441a      	add	r2, r3
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	202c      	movs	r0, #44	; 0x2c
 8002c4a:	fb00 f303 	mul.w	r3, r0, r3
 8002c4e:	440b      	add	r3, r1
 8002c50:	3344      	adds	r3, #68	; 0x44
 8002c52:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3350      	adds	r3, #80	; 0x50
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	441a      	add	r2, r3
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	202c      	movs	r0, #44	; 0x2c
 8002c6e:	fb00 f303 	mul.w	r3, r0, r3
 8002c72:	440b      	add	r3, r1
 8002c74:	3350      	adds	r3, #80	; 0x50
 8002c76:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	0cdb      	lsrs	r3, r3, #19
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3340      	adds	r3, #64	; 0x40
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d13c      	bne.n	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d039      	beq.n	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cc2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3354      	adds	r3, #84	; 0x54
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2d8      	uxtb	r0, r3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3354      	adds	r3, #84	; 0x54
 8002d02:	4602      	mov	r2, r0
 8002d04:	701a      	strb	r2, [r3, #0]
      break;
 8002d06:	e00b      	b.n	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2204      	movs	r2, #4
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e001      	b.n	8002d20 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d20:	bf00      	nop
  }
}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d56:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d10b      	bne.n	8002d7a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f005 fce3 	bl	8008738 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d132      	bne.n	8002dea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d126      	bne.n	8002de4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d113      	bne.n	8002dc6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da8:	d106      	bne.n	8002db8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f002 fefd 	bl	8005bb0 <USB_InitFSLSPClkSel>
 8002db6:	e011      	b.n	8002ddc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fef6 	bl	8005bb0 <USB_InitFSLSPClkSel>
 8002dc4:	e00a      	b.n	8002ddc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d106      	bne.n	8002ddc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dda:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f005 fcd5 	bl	800878c <HAL_HCD_PortEnabled_Callback>
 8002de2:	e002      	b.n	8002dea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f005 fcdf 	bl	80087a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d103      	bne.n	8002dfc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e12b      	b.n	800307a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd fde0 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e74:	f001 fa20 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a81      	ldr	r2, [pc, #516]	; (8003084 <HAL_I2C_Init+0x274>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d807      	bhi.n	8002e94 <HAL_I2C_Init+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a80      	ldr	r2, [pc, #512]	; (8003088 <HAL_I2C_Init+0x278>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e006      	b.n	8002ea2 <HAL_I2C_Init+0x92>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a7d      	ldr	r2, [pc, #500]	; (800308c <HAL_I2C_Init+0x27c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bf94      	ite	ls
 8002e9c:	2301      	movls	r3, #1
 8002e9e:	2300      	movhi	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0e7      	b.n	800307a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a78      	ldr	r2, [pc, #480]	; (8003090 <HAL_I2C_Init+0x280>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <HAL_I2C_Init+0x274>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <HAL_I2C_Init+0xd4>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	e009      	b.n	8002ef8 <HAL_I2C_Init+0xe8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	4a69      	ldr	r2, [pc, #420]	; (8003094 <HAL_I2C_Init+0x284>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	495c      	ldr	r1, [pc, #368]	; (8003084 <HAL_I2C_Init+0x274>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d819      	bhi.n	8002f4c <HAL_I2C_Init+0x13c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e59      	subs	r1, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_I2C_Init+0x138>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e59      	subs	r1, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	e051      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e04f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_I2C_Init+0x168>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Init+0x18e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x196>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <HAL_I2C_Init+0x1bc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e58      	subs	r0, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6911      	ldr	r1, [r2, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000186a0 	.word	0x000186a0
 8003088:	001e847f 	.word	0x001e847f
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	431bde83 	.word	0x431bde83
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e128      	b.n	80032fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_I2S_Init+0x26c>)
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fce1 	bl	8000a8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030e0:	f023 030f 	bic.w	r3, r3, #15
 80030e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2202      	movs	r2, #2
 80030ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d060      	beq.n	80031b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030fe:	2310      	movs	r3, #16
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b20      	cmp	r3, #32
 800310e:	d802      	bhi.n	8003116 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003116:	2001      	movs	r0, #1
 8003118:	f001 f9d8 	bl	80044cc <HAL_RCCEx_GetPeriphCLKFreq>
 800311c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	d125      	bne.n	8003174 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	fbb2 f2f3 	udiv	r2, r2, r3
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	461a      	mov	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	3305      	adds	r3, #5
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e01f      	b.n	8003192 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	3305      	adds	r3, #5
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e00e      	b.n	8003192 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	3305      	adds	r3, #5
 8003190:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a5c      	ldr	r2, [pc, #368]	; (8003308 <HAL_I2S_Init+0x270>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e003      	b.n	80031c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031b8:	2302      	movs	r3, #2
 80031ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d902      	bls.n	80031cc <HAL_I2S_Init+0x134>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2bff      	cmp	r3, #255	; 0xff
 80031ca:	d907      	bls.n	80031dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f043 0210 	orr.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e08f      	b.n	80032fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	ea42 0103 	orr.w	r1, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031fa:	f023 030f 	bic.w	r3, r3, #15
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6851      	ldr	r1, [r2, #4]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6892      	ldr	r2, [r2, #8]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68d2      	ldr	r2, [r2, #12]
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6992      	ldr	r2, [r2, #24]
 8003212:	430a      	orrs	r2, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d161      	bne.n	80032ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_I2S_Init+0x274>)
 800322c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a37      	ldr	r2, [pc, #220]	; (8003310 <HAL_I2S_Init+0x278>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_I2S_Init+0x1a4>
 8003238:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_I2S_Init+0x27c>)
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x1a8>
 800323c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4932      	ldr	r1, [pc, #200]	; (8003310 <HAL_I2S_Init+0x278>)
 8003248:	428a      	cmp	r2, r1
 800324a:	d101      	bne.n	8003250 <HAL_I2S_Init+0x1b8>
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_I2S_Init+0x27c>)
 800324e:	e001      	b.n	8003254 <HAL_I2S_Init+0x1bc>
 8003250:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003254:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003258:	f023 030f 	bic.w	r3, r3, #15
 800325c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <HAL_I2S_Init+0x278>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_I2S_Init+0x1d4>
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_I2S_Init+0x27c>)
 800326a:	e001      	b.n	8003270 <HAL_I2S_Init+0x1d8>
 800326c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003270:	2202      	movs	r2, #2
 8003272:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_I2S_Init+0x278>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_I2S_Init+0x1ea>
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_I2S_Init+0x27c>)
 8003280:	e001      	b.n	8003286 <HAL_I2S_Init+0x1ee>
 8003282:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d003      	beq.n	800329c <HAL_I2S_Init+0x204>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800329c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e001      	b.n	80032a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032bc:	4313      	orrs	r3, r2
 80032be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_I2S_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_I2S_Init+0x24c>
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_I2S_Init+0x27c>)
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x250>
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e8:	897a      	ldrh	r2, [r7, #10]
 80032ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	0800340f 	.word	0x0800340f
 8003308:	cccccccd 	.word	0xcccccccd
 800330c:	08003525 	.word	0x08003525
 8003310:	40003800 	.word	0x40003800
 8003314:	40003400 	.word	0x40003400

08003318 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10e      	bne.n	80033a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003398:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffb8 	bl	8003318 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	b292      	uxth	r2, r2
 80033c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	1c9a      	adds	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10e      	bne.n	8003406 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff93 	bl	800332c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b04      	cmp	r3, #4
 8003428:	d13a      	bne.n	80034a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	d109      	bne.n	8003448 <I2S_IRQHandler+0x3a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d102      	bne.n	8003448 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffb4 	bl	80033b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d126      	bne.n	80034a0 <I2S_IRQHandler+0x92>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d11f      	bne.n	80034a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff50 	bl	8003340 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d136      	bne.n	800351a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d109      	bne.n	80034ca <I2S_IRQHandler+0xbc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d102      	bne.n	80034ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff45 	bl	8003354 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d122      	bne.n	800351a <I2S_IRQHandler+0x10c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d11b      	bne.n	800351a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff13 	bl	8003340 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a92      	ldr	r2, [pc, #584]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800353e:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a8b      	ldr	r2, [pc, #556]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800355c:	4b8a      	ldr	r3, [pc, #552]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800355e:	e001      	b.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d004      	beq.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 8099 	bne.w	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f925 	bl	80037e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9c8 	bl	8003940 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d13a      	bne.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d035      	beq.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ce:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4969      	ldr	r1, [pc, #420]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035de:	428b      	cmp	r3, r1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035e2:	4b69      	ldr	r3, [pc, #420]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e4:	e001      	b.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fe88 	bl	8003340 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	f040 80c3 	bne.w	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80bd 	beq.w	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003656:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4944      	ldr	r1, [pc, #272]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003672:	428b      	cmp	r3, r1
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003682:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0204 	orr.w	r2, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe4a 	bl	8003340 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ac:	e089      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d107      	bne.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8be 	bl	8003844 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8fd 	bl	80038dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d12f      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d02a      	beq.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003704:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003712:	e001      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4919      	ldr	r1, [pc, #100]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d101      	bne.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003726:	e001      	b.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003730:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fdfa 	bl	8003340 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d136      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d031      	beq.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4902      	ldr	r1, [pc, #8]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d106      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800377e:	4b02      	ldr	r3, [pc, #8]	; (8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003780:	e006      	b.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003782:	bf00      	nop
 8003784:	40003800 	.word	0x40003800
 8003788:	40003400 	.word	0x40003400
 800378c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003794:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fdc0 	bl	8003340 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c0:	e000      	b.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c2:	bf00      	nop
}
 80037c4:	bf00      	nop
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c99      	adds	r1, r3, #2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6251      	str	r1, [r2, #36]	; 0x24
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003820:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffc9 	bl	80037cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c99      	adds	r1, r3, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6251      	str	r1, [r2, #36]	; 0x24
 8003856:	8819      	ldrh	r1, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <I2SEx_TxISR_I2SExt+0x90>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <I2SEx_TxISR_I2SExt+0x22>
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <I2SEx_TxISR_I2SExt+0x94>)
 8003864:	e001      	b.n	800386a <I2SEx_TxISR_I2SExt+0x26>
 8003866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386a:	460a      	mov	r2, r1
 800386c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <I2SEx_TxISR_I2SExt+0x90>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <I2SEx_TxISR_I2SExt+0x50>
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <I2SEx_TxISR_I2SExt+0x94>)
 8003892:	e001      	b.n	8003898 <I2SEx_TxISR_I2SExt+0x54>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	490d      	ldr	r1, [pc, #52]	; (80038d4 <I2SEx_TxISR_I2SExt+0x90>)
 80038a0:	428b      	cmp	r3, r1
 80038a2:	d101      	bne.n	80038a8 <I2SEx_TxISR_I2SExt+0x64>
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <I2SEx_TxISR_I2SExt+0x94>)
 80038a6:	e001      	b.n	80038ac <I2SEx_TxISR_I2SExt+0x68>
 80038a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff81 	bl	80037cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40003400 	.word	0x40003400

080038dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68d8      	ldr	r0, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	1c99      	adds	r1, r3, #2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038f4:	b282      	uxth	r2, r0
 80038f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d113      	bne.n	8003938 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ff4a 	bl	80037cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <I2SEx_RxISR_I2SExt+0x90>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <I2SEx_RxISR_I2SExt+0x16>
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <I2SEx_RxISR_I2SExt+0x94>)
 8003954:	e001      	b.n	800395a <I2SEx_RxISR_I2SExt+0x1a>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	68d8      	ldr	r0, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	1c99      	adds	r1, r3, #2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003966:	b282      	uxth	r2, r0
 8003968:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d121      	bne.n	80039c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <I2SEx_RxISR_I2SExt+0x90>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <I2SEx_RxISR_I2SExt+0x50>
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <I2SEx_RxISR_I2SExt+0x94>)
 800398e:	e001      	b.n	8003994 <I2SEx_RxISR_I2SExt+0x54>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	490d      	ldr	r1, [pc, #52]	; (80039d0 <I2SEx_RxISR_I2SExt+0x90>)
 800399c:	428b      	cmp	r3, r1
 800399e:	d101      	bne.n	80039a4 <I2SEx_RxISR_I2SExt+0x64>
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <I2SEx_RxISR_I2SExt+0x94>)
 80039a2:	e001      	b.n	80039a8 <I2SEx_RxISR_I2SExt+0x68>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff03 	bl	80037cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40003800 	.word	0x40003800
 80039d4:	40003400 	.word	0x40003400

080039d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e267      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d075      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f6:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d112      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x108>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d157      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e242      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x74>
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x98>
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6c      	ldr	r2, [pc, #432]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a68      	ldr	r2, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a65      	ldr	r2, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fa2a 	bl	8000ee8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd fa26 	bl	8000ee8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e207      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xc0>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fa16 	bl	8000ee8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fa12 	bl	8000ee8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1f3      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xe8>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aee:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x152>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1c7      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4937      	ldr	r1, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x244>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd f9cb 	bl	8000ee8 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fd f9c7 	bl	8000ee8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1a8      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4925      	ldr	r1, [pc, #148]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x244>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd f9aa 	bl	8000ee8 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fd f9a6 	bl	8000ee8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e187      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x248>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f98a 	bl	8000ee8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fd f986 	bl	8000ee8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e167      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x200>
 8003bf6:	e01b      	b.n	8003c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x248>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f973 	bl	8000ee8 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	e00e      	b.n	8003c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fd f96f 	bl	8000ee8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d907      	bls.n	8003c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e150      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	42470000 	.word	0x42470000
 8003c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ea      	bne.n	8003c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b7d      	ldr	r3, [pc, #500]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b77      	ldr	r3, [pc, #476]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b74      	ldr	r3, [pc, #464]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a73      	ldr	r2, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fd f92f 	bl	8000ee8 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fd f92b 	bl	8000ee8 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e10c      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2ea>
 8003cb4:	4b64      	ldr	r3, [pc, #400]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x324>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x30c>
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5e      	ldr	r2, [pc, #376]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x324>
 8003ce4:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b55      	ldr	r3, [pc, #340]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a54      	ldr	r2, [pc, #336]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd f8f0 	bl	8000ee8 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd f8ec 	bl	8000ee8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0cb      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b49      	ldr	r3, [pc, #292]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCC_OscConfig+0x334>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d30:	f7fd f8da 	bl	8000ee8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd f8d6 	bl	8000ee8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0b5      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a1 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d05c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d141      	bne.n	8003e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f8aa 	bl	8000ee8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd f8a6 	bl	8000ee8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e087      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	491b      	ldr	r1, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fd f87f 	bl	8000ee8 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dee:	f7fd f87b 	bl	8000ee8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e05c      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x416>
 8003e0c:	e054      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd f868 	bl	8000ee8 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd f864 	bl	8000ee8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e045      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x444>
 8003e3a:	e03d      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e038      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x4ec>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d028      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d121      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11a      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d111      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0cc      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d90c      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b8      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b59      	ldr	r3, [pc, #356]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a58      	ldr	r2, [pc, #352]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b53      	ldr	r3, [pc, #332]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494d      	ldr	r1, [pc, #308]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d119      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e067      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b37      	ldr	r3, [pc, #220]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4934      	ldr	r1, [pc, #208]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc ff96 	bl	8000ee8 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fc ff92 	bl	8000ee8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20c      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e032      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490e      	ldr	r1, [pc, #56]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f821 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fef6 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023c00 	.word	0x40023c00
 8004084:	40023800 	.word	0x40023800
 8004088:	08008e60 	.word	0x08008e60
 800408c:	20000000 	.word	0x20000000
 8004090:	20000004 	.word	0x20000004

08004094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b094      	sub	sp, #80	; 0x50
 800409a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	647b      	str	r3, [r7, #68]	; 0x44
 80040a0:	2300      	movs	r3, #0
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a4:	2300      	movs	r3, #0
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ac:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x40>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	f200 80e1 	bhi.w	8004280 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x34>
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x3a>
 80040c6:	e0db      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b73      	ldr	r3, [pc, #460]	; (8004298 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040cc:	e0db      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ce:	4b73      	ldr	r3, [pc, #460]	; (800429c <HAL_RCC_GetSysClockFreq+0x208>)
 80040d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d2:	e0d8      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d4:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040de:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	f04f 0000 	mov.w	r0, #0
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	0159      	lsls	r1, r3, #5
 8004114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004118:	0150      	lsls	r0, r2, #5
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4621      	mov	r1, r4
 8004120:	1a51      	subs	r1, r2, r1
 8004122:	6139      	str	r1, [r7, #16]
 8004124:	4629      	mov	r1, r5
 8004126:	eb63 0301 	sbc.w	r3, r3, r1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004138:	4659      	mov	r1, fp
 800413a:	018b      	lsls	r3, r1, #6
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004142:	4651      	mov	r1, sl
 8004144:	018a      	lsls	r2, r1, #6
 8004146:	4651      	mov	r1, sl
 8004148:	ebb2 0801 	subs.w	r8, r2, r1
 800414c:	4659      	mov	r1, fp
 800414e:	eb63 0901 	sbc.w	r9, r3, r1
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004166:	4690      	mov	r8, r2
 8004168:	4699      	mov	r9, r3
 800416a:	4623      	mov	r3, r4
 800416c:	eb18 0303 	adds.w	r3, r8, r3
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	462b      	mov	r3, r5
 8004174:	eb49 0303 	adc.w	r3, r9, r3
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004186:	4629      	mov	r1, r5
 8004188:	024b      	lsls	r3, r1, #9
 800418a:	4621      	mov	r1, r4
 800418c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004190:	4621      	mov	r1, r4
 8004192:	024a      	lsls	r2, r1, #9
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	2200      	movs	r2, #0
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
 800419e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a4:	f7fc f810 	bl	80001c8 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	e058      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	2200      	movs	r2, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	4611      	mov	r1, r2
 80041be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	f04f 0000 	mov.w	r0, #0
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	0159      	lsls	r1, r3, #5
 80041da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041de:	0150      	lsls	r0, r2, #5
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4641      	mov	r1, r8
 80041e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ea:	4649      	mov	r1, r9
 80041ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004200:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004204:	ebb2 040a 	subs.w	r4, r2, sl
 8004208:	eb63 050b 	sbc.w	r5, r3, fp
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	00eb      	lsls	r3, r5, #3
 8004216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421a:	00e2      	lsls	r2, r4, #3
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	4643      	mov	r3, r8
 8004222:	18e3      	adds	r3, r4, r3
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	464b      	mov	r3, r9
 8004228:	eb45 0303 	adc.w	r3, r5, r3
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800423a:	4629      	mov	r1, r5
 800423c:	028b      	lsls	r3, r1, #10
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004244:	4621      	mov	r1, r4
 8004246:	028a      	lsls	r2, r1, #10
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	2200      	movs	r2, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	61fa      	str	r2, [r7, #28]
 8004254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004258:	f7fb ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	3301      	adds	r3, #1
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427e:	e002      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004288:	4618      	mov	r0, r3
 800428a:	3750      	adds	r7, #80	; 0x50
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	00f42400 	.word	0x00f42400
 800429c:	007a1200 	.word	0x007a1200

080042a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000000 	.word	0x20000000

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08008e70 	.word	0x08008e70

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffdc 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	08008e70 	.word	0x08008e70

08004308 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800432c:	2b00      	cmp	r3, #0
 800432e:	d035      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004336:	f7fc fdd7 	bl	8000ee8 <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800433e:	f7fc fdd3 	bl	8000ee8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0b0      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004350:	4b5b      	ldr	r3, [pc, #364]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	019a      	lsls	r2, r3, #6
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	071b      	lsls	r3, r3, #28
 8004368:	4955      	ldr	r1, [pc, #340]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004370:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7fc fdb7 	bl	8000ee8 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437e:	f7fc fdb3 	bl	8000ee8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e090      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004390:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8083 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043d2:	f7fc fd89 	bl	8000ee8 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fc fd85 	bl	8000ee8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e062      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043f8:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02f      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d028      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004416:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004420:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800442c:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d114      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800443e:	f7fc fd53 	bl	8000ee8 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	e00a      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fc fd4f 	bl	8000ee8 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	; 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e02a      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ee      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004474:	d10d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	490d      	ldr	r1, [pc, #52]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800449c:	6093      	str	r3, [r2, #8]
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044aa:	4905      	ldr	r1, [pc, #20]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	42470068 	.word	0x42470068
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42470e40 	.word	0x42470e40

080044cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d13e      	bne.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d12f      	bne.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004502:	617b      	str	r3, [r7, #20]
          break;
 8004504:	e02f      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004512:	d108      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e007      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800454c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004550:	0f1b      	lsrs	r3, r3, #28
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
          break;
 800455e:	e002      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
          break;
 8004564:	bf00      	nop
        }
      }
      break;
 8004566:	bf00      	nop
    }
  }
  return frequency;
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	00bb8000 	.word	0x00bb8000
 8004580:	007a1200 	.word	0x007a1200
 8004584:	00f42400 	.word	0x00f42400

08004588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07b      	b.n	8004692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045aa:	d009      	beq.n	80045c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	61da      	str	r2, [r3, #28]
 80045b2:	e005      	b.n	80045c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fad6 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	ea42 0103 	orr.w	r1, r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0104 	and.w	r1, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0210 	and.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e03f      	b.n	800472c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc faab 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2224      	movs	r2, #36	; 0x24
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fd12 	bl	8005108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004702:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004712:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d152      	bne.n	80047f4 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e04b      	b.n	80047f6 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8004768:	2302      	movs	r3, #2
 800476a:	e044      	b.n	80047f6 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	461a      	mov	r2, r3
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fae9 	bl	8004d58 <UART_Start_Receive_IT>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800478c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004790:	2b00      	cmp	r3, #0
 8004792:	d12c      	bne.n	80047ee <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	2b01      	cmp	r3, #1
 800479a:	d125      	bne.n	80047e8 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	617b      	str	r3, [r7, #20]
   return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f043 0310 	orr.w	r3, r3, #16
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d2:	627a      	str	r2, [r7, #36]	; 0x24
 80047d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6a39      	ldr	r1, [r7, #32]
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e5      	bne.n	80047b2 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80047e6:	e002      	b.n	80047ee <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80047ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047f2:	e000      	b.n	80047f6 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3730      	adds	r7, #48	; 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b0ba      	sub	sp, #232	; 0xe8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800483e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_UART_IRQHandler+0x66>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fb97 	bl	8004f92 <UART_Receive_IT>
      return;
 8004864:	e256      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80de 	beq.w	8004a2c <HAL_UART_IRQHandler+0x22c>
 8004870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80d1 	beq.w	8004a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_UART_IRQHandler+0xae>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_UART_IRQHandler+0xd2>
 80048ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0202 	orr.w	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xf6>
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d011      	beq.n	8004926 <HAL_UART_IRQHandler+0x126>
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 81ed 	beq.w	8004d0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_UART_IRQHandler+0x14e>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb22 	bl	8004f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_UART_IRQHandler+0x17a>
 8004972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04f      	beq.n	8004a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa2a 	bl	8004dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d141      	bne.n	8004a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1d9      	bne.n	800498e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	4a7d      	ldr	r2, [pc, #500]	; (8004bdc <HAL_UART_IRQHandler+0x3dc>)
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fc2b 	bl	800124a <HAL_DMA_Abort_IT>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	e00e      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f99a 	bl	8004d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e00a      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f996 	bl	8004d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e006      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f992 	bl	8004d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a26:	e170      	b.n	8004d0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	bf00      	nop
    return;
 8004a2a:	e16e      	b.n	8004d0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 814a 	bne.w	8004cca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8143 	beq.w	8004cca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 813c 	beq.w	8004cca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	f040 80b4 	bne.w	8004be0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8140 	beq.w	8004d0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a96:	429a      	cmp	r2, r3
 8004a98:	f080 8139 	bcs.w	8004d0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	f000 8088 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d9      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e1      	bne.n	8004afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3314      	adds	r3, #20
 8004b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e3      	bne.n	8004b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fc fad4 	bl	800116a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fb fed0 	bl	8000978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bd8:	e099      	b.n	8004d0e <HAL_UART_IRQHandler+0x50e>
 8004bda:	bf00      	nop
 8004bdc:	08004e9b 	.word	0x08004e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 808b 	beq.w	8004d12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8086 	beq.w	8004d12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e3      	bne.n	8004c06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c62:	633a      	str	r2, [r7, #48]	; 0x30
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e3      	bne.n	8004c84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fb fe58 	bl	8000978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cc8:	e023      	b.n	8004d12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0x4ea>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8ed 	bl	8004ec2 <UART_Transmit_IT>
    return;
 8004ce8:	e014      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <HAL_UART_IRQHandler+0x514>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f92d 	bl	8004f62 <UART_EndTransmit_IT>
    return;
 8004d08:	e004      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
    return;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
      return;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
      return;
 8004d12:	bf00      	nop
  }
}
 8004d14:	37e8      	adds	r7, #232	; 0xe8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2222      	movs	r2, #34	; 0x22
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0220 	orr.w	r2, r2, #32
 8004dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b095      	sub	sp, #84	; 0x54
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfc:	643a      	str	r2, [r7, #64]	; 0x40
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d119      	bne.n	8004e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6c:	61ba      	str	r2, [r7, #24]
 8004e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e8e:	bf00      	nop
 8004e90:	3754      	adds	r7, #84	; 0x54
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff45 	bl	8004d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b21      	cmp	r3, #33	; 0x21
 8004ed4:	d13e      	bne.n	8004f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	d114      	bne.n	8004f0a <UART_Transmit_IT+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	621a      	str	r2, [r3, #32]
 8004f08:	e008      	b.n	8004f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	1c59      	adds	r1, r3, #1
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6211      	str	r1, [r2, #32]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff feca 	bl	8004d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08c      	sub	sp, #48	; 0x30
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	f040 80ab 	bne.w	80050fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d117      	bne.n	8004fe2 <UART_Receive_IT+0x50>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d113      	bne.n	8004fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	1c9a      	adds	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe0:	e026      	b.n	8005030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d007      	beq.n	8005006 <UART_Receive_IT+0x74>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <UART_Receive_IT+0x82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e008      	b.n	8005026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005020:	b2da      	uxtb	r2, r3
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4619      	mov	r1, r3
 800503e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005040:	2b00      	cmp	r3, #0
 8005042:	d15a      	bne.n	80050fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0220 	bic.w	r2, r2, #32
 8005052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	2b01      	cmp	r3, #1
 8005082:	d135      	bne.n	80050f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	613b      	str	r3, [r7, #16]
   return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	623a      	str	r2, [r7, #32]
 80050ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d10a      	bne.n	80050e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7fb fc45 	bl	8000978 <HAL_UARTEx_RxEventCallback>
 80050ee:	e002      	b.n	80050f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fe1d 	bl	8004d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e002      	b.n	8005100 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3730      	adds	r7, #48	; 0x30
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b0c0      	sub	sp, #256	; 0x100
 800510e:	af00      	add	r7, sp, #0
 8005110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	68d9      	ldr	r1, [r3, #12]
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	ea40 0301 	orr.w	r3, r0, r1
 8005130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	431a      	orrs	r2, r3
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	431a      	orrs	r2, r3
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005160:	f021 010c 	bic.w	r1, r1, #12
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800516e:	430b      	orrs	r3, r1
 8005170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005182:	6999      	ldr	r1, [r3, #24]
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	ea40 0301 	orr.w	r3, r0, r1
 800518e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005198:	429a      	cmp	r2, r3
 800519a:	d005      	beq.n	80051a8 <UART_SetConfig+0xa0>
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b8d      	ldr	r3, [pc, #564]	; (80053d8 <UART_SetConfig+0x2d0>)
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d104      	bne.n	80051b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7ff f89a 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 80051ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051b0:	e003      	b.n	80051ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7ff f881 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 80051b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c4:	f040 810c 	bne.w	80053e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051e2:	415b      	adcs	r3, r3
 80051e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ea:	4621      	mov	r1, r4
 80051ec:	eb12 0801 	adds.w	r8, r2, r1
 80051f0:	4629      	mov	r1, r5
 80051f2:	eb43 0901 	adc.w	r9, r3, r1
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800520a:	4690      	mov	r8, r2
 800520c:	4699      	mov	r9, r3
 800520e:	4623      	mov	r3, r4
 8005210:	eb18 0303 	adds.w	r3, r8, r3
 8005214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005218:	462b      	mov	r3, r5
 800521a:	eb49 0303 	adc.w	r3, r9, r3
 800521e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800522e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005236:	460b      	mov	r3, r1
 8005238:	18db      	adds	r3, r3, r3
 800523a:	653b      	str	r3, [r7, #80]	; 0x50
 800523c:	4613      	mov	r3, r2
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
 8005244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800524c:	f7fa ffbc 	bl	80001c8 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4b61      	ldr	r3, [pc, #388]	; (80053dc <UART_SetConfig+0x2d4>)
 8005256:	fba3 2302 	umull	r2, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	011c      	lsls	r4, r3, #4
 800525e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800526c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	1891      	adds	r1, r2, r2
 8005276:	64b9      	str	r1, [r7, #72]	; 0x48
 8005278:	415b      	adcs	r3, r3
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005280:	4641      	mov	r1, r8
 8005282:	eb12 0a01 	adds.w	sl, r2, r1
 8005286:	4649      	mov	r1, r9
 8005288:	eb43 0b01 	adc.w	fp, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800529c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a0:	4692      	mov	sl, r2
 80052a2:	469b      	mov	fp, r3
 80052a4:	4643      	mov	r3, r8
 80052a6:	eb1a 0303 	adds.w	r3, sl, r3
 80052aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052ae:	464b      	mov	r3, r9
 80052b0:	eb4b 0303 	adc.w	r3, fp, r3
 80052b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052cc:	460b      	mov	r3, r1
 80052ce:	18db      	adds	r3, r3, r3
 80052d0:	643b      	str	r3, [r7, #64]	; 0x40
 80052d2:	4613      	mov	r3, r2
 80052d4:	eb42 0303 	adc.w	r3, r2, r3
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052e2:	f7fa ff71 	bl	80001c8 <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <UART_SetConfig+0x2d4>)
 80052ee:	fba3 2301 	umull	r2, r3, r3, r1
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	2264      	movs	r2, #100	; 0x64
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005302:	4b36      	ldr	r3, [pc, #216]	; (80053dc <UART_SetConfig+0x2d4>)
 8005304:	fba3 2302 	umull	r2, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005310:	441c      	add	r4, r3
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800531c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	63b9      	str	r1, [r7, #56]	; 0x38
 800532c:	415b      	adcs	r3, r3
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005334:	4641      	mov	r1, r8
 8005336:	1851      	adds	r1, r2, r1
 8005338:	6339      	str	r1, [r7, #48]	; 0x30
 800533a:	4649      	mov	r1, r9
 800533c:	414b      	adcs	r3, r1
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800534c:	4659      	mov	r1, fp
 800534e:	00cb      	lsls	r3, r1, #3
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005356:	4651      	mov	r1, sl
 8005358:	00ca      	lsls	r2, r1, #3
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	4603      	mov	r3, r0
 8005360:	4642      	mov	r2, r8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800539e:	f7fa ff13 	bl	80001c8 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <UART_SetConfig+0x2d4>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <UART_SetConfig+0x2d4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f003 0207 	and.w	r2, r3, #7
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4422      	add	r2, r4
 80053ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d0:	e106      	b.n	80055e0 <UART_SetConfig+0x4d8>
 80053d2:	bf00      	nop
 80053d4:	40011000 	.word	0x40011000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053f2:	4642      	mov	r2, r8
 80053f4:	464b      	mov	r3, r9
 80053f6:	1891      	adds	r1, r2, r2
 80053f8:	6239      	str	r1, [r7, #32]
 80053fa:	415b      	adcs	r3, r3
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005402:	4641      	mov	r1, r8
 8005404:	1854      	adds	r4, r2, r1
 8005406:	4649      	mov	r1, r9
 8005408:	eb43 0501 	adc.w	r5, r3, r1
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	00eb      	lsls	r3, r5, #3
 8005416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800541a:	00e2      	lsls	r2, r4, #3
 800541c:	4614      	mov	r4, r2
 800541e:	461d      	mov	r5, r3
 8005420:	4643      	mov	r3, r8
 8005422:	18e3      	adds	r3, r4, r3
 8005424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005428:	464b      	mov	r3, r9
 800542a:	eb45 0303 	adc.w	r3, r5, r3
 800542e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800543e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800544e:	4629      	mov	r1, r5
 8005450:	008b      	lsls	r3, r1, #2
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005458:	4621      	mov	r1, r4
 800545a:	008a      	lsls	r2, r1, #2
 800545c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005460:	f7fa feb2 	bl	80001c8 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4b60      	ldr	r3, [pc, #384]	; (80055ec <UART_SetConfig+0x4e4>)
 800546a:	fba3 2302 	umull	r2, r3, r3, r2
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	011c      	lsls	r4, r3, #4
 8005472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800547c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	1891      	adds	r1, r2, r2
 800548a:	61b9      	str	r1, [r7, #24]
 800548c:	415b      	adcs	r3, r3
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005494:	4641      	mov	r1, r8
 8005496:	1851      	adds	r1, r2, r1
 8005498:	6139      	str	r1, [r7, #16]
 800549a:	4649      	mov	r1, r9
 800549c:	414b      	adcs	r3, r1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ac:	4659      	mov	r1, fp
 80054ae:	00cb      	lsls	r3, r1, #3
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054b6:	4651      	mov	r1, sl
 80054b8:	00ca      	lsls	r2, r1, #3
 80054ba:	4610      	mov	r0, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	4642      	mov	r2, r8
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054c8:	464b      	mov	r3, r9
 80054ca:	460a      	mov	r2, r1
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054ec:	4649      	mov	r1, r9
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	4641      	mov	r1, r8
 80054f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f6:	4641      	mov	r1, r8
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054fe:	f7fa fe63 	bl	80001c8 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4611      	mov	r1, r2
 8005508:	4b38      	ldr	r3, [pc, #224]	; (80055ec <UART_SetConfig+0x4e4>)
 800550a:	fba3 2301 	umull	r2, r3, r3, r1
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2264      	movs	r2, #100	; 0x64
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	1acb      	subs	r3, r1, r3
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	3332      	adds	r3, #50	; 0x32
 800551c:	4a33      	ldr	r2, [pc, #204]	; (80055ec <UART_SetConfig+0x4e4>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005528:	441c      	add	r4, r3
 800552a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552e:	2200      	movs	r2, #0
 8005530:	673b      	str	r3, [r7, #112]	; 0x70
 8005532:	677a      	str	r2, [r7, #116]	; 0x74
 8005534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	1891      	adds	r1, r2, r2
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	415b      	adcs	r3, r3
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005548:	4641      	mov	r1, r8
 800554a:	1851      	adds	r1, r2, r1
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	4649      	mov	r1, r9
 8005550:	414b      	adcs	r3, r1
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005560:	4659      	mov	r1, fp
 8005562:	00cb      	lsls	r3, r1, #3
 8005564:	4651      	mov	r1, sl
 8005566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556a:	4651      	mov	r1, sl
 800556c:	00ca      	lsls	r2, r1, #3
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	4603      	mov	r3, r0
 8005574:	4642      	mov	r2, r8
 8005576:	189b      	adds	r3, r3, r2
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
 800557a:	464b      	mov	r3, r9
 800557c:	460a      	mov	r2, r1
 800557e:	eb42 0303 	adc.w	r3, r2, r3
 8005582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	663b      	str	r3, [r7, #96]	; 0x60
 800558e:	667a      	str	r2, [r7, #100]	; 0x64
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800559c:	4649      	mov	r1, r9
 800559e:	008b      	lsls	r3, r1, #2
 80055a0:	4641      	mov	r1, r8
 80055a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a6:	4641      	mov	r1, r8
 80055a8:	008a      	lsls	r2, r1, #2
 80055aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055ae:	f7fa fe0b 	bl	80001c8 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <UART_SetConfig+0x4e4>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	; 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	3332      	adds	r3, #50	; 0x32
 80055ca:	4a08      	ldr	r2, [pc, #32]	; (80055ec <UART_SetConfig+0x4e4>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4422      	add	r2, r4
 80055de:	609a      	str	r2, [r3, #8]
}
 80055e0:	bf00      	nop
 80055e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055e6:	46bd      	mov	sp, r7
 80055e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ec:	51eb851f 	.word	0x51eb851f

080055f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f0:	b084      	sub	sp, #16
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	f107 001c 	add.w	r0, r7, #28
 80055fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	d122      	bne.n	800564e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800561c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d105      	bne.n	8005642 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9c0 	bl	80059c8 <USB_CoreReset>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	e01a      	b.n	8005684 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9b4 	bl	80059c8 <USB_CoreReset>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
 8005676:	e005      	b.n	8005684 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10b      	bne.n	80056a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f043 0206 	orr.w	r2, r3, #6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ae:	b004      	add	sp, #16
 80056b0:	4770      	bx	lr

080056b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f023 0201 	bic.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d115      	bne.n	8005744 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005724:	2001      	movs	r0, #1
 8005726:	f7fb fbeb 	bl	8000f00 <HAL_Delay>
      ms++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f93a 	bl	80059aa <USB_GetMode>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d01e      	beq.n	800577a <USB_SetCurrentMode+0x84>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b31      	cmp	r3, #49	; 0x31
 8005740:	d9f0      	bls.n	8005724 <USB_SetCurrentMode+0x2e>
 8005742:	e01a      	b.n	800577a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d115      	bne.n	8005776 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005756:	2001      	movs	r0, #1
 8005758:	f7fb fbd2 	bl	8000f00 <HAL_Delay>
      ms++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f921 	bl	80059aa <USB_GetMode>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <USB_SetCurrentMode+0x84>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b31      	cmp	r3, #49	; 0x31
 8005772:	d9f0      	bls.n	8005756 <USB_SetCurrentMode+0x60>
 8005774:	e001      	b.n	800577a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e005      	b.n	8005786 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b32      	cmp	r3, #50	; 0x32
 800577e:	d101      	bne.n	8005784 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <USB_FlushTxFifo+0x64>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e01b      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	daf2      	bge.n	800579e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USB_FlushTxFifo+0x64>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a11      	ldr	r2, [pc, #68]	; (8005854 <USB_FlushRxFifo+0x5c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e018      	b.n	8005848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	daf2      	bge.n	8005804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2210      	movs	r2, #16
 8005826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <USB_FlushRxFifo+0x5c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e006      	b.n	8005848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d0f0      	beq.n	8005828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	00030d40 	.word	0x00030d40

08005858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	460b      	mov	r3, r1
 8005868:	71fb      	strb	r3, [r7, #7]
 800586a:	4613      	mov	r3, r2
 800586c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d123      	bne.n	80058c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	3303      	adds	r3, #3
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e018      	b.n	80058be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	031a      	lsls	r2, r3, #12
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e2      	bcc.n	800588c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3724      	adds	r7, #36	; 0x24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b08b      	sub	sp, #44	; 0x2c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e014      	b.n	800592a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	601a      	str	r2, [r3, #0]
    pDest++;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	3301      	adds	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	3301      	adds	r3, #1
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d3e6      	bcc.n	8005900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005932:	8bfb      	ldrh	r3, [r7, #30]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01e      	beq.n	8005976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	461a      	mov	r2, r3
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	701a      	strb	r2, [r3, #0]
      i++;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	623b      	str	r3, [r7, #32]
      pDest++;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	3b01      	subs	r3, #1
 800596e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ea      	bne.n	800594c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005978:	4618      	mov	r0, r3
 800597a:	372c      	adds	r7, #44	; 0x2c
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0301 	and.w	r3, r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a30:	b084      	sub	sp, #16
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10a      	bne.n	8005aa2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e014      	b.n	8005acc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e009      	b.n	8005acc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac6:	f023 0304 	bic.w	r3, r3, #4
 8005aca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005acc:	2110      	movs	r1, #16
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fe5e 	bl	8005790 <USB_FlushTxFifo>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe8a 	bl	80057f8 <USB_FlushRxFifo>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e015      	b.n	8005b20 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3e5      	bcc.n	8005af4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <USB_HostInit+0x16c>)
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_HostInit+0x170>)
 8005b54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b58:	e009      	b.n	8005b6e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <USB_HostInit+0x174>)
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <USB_HostInit+0x178>)
 8005b6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f043 0210 	orr.w	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <USB_HostInit+0x17c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b98:	b004      	add	sp, #16
 8005b9a:	4770      	bx	lr
 8005b9c:	01000200 	.word	0x01000200
 8005ba0:	00e00300 	.word	0x00e00300
 8005ba4:	00600080 	.word	0x00600080
 8005ba8:	004000e0 	.word	0x004000e0
 8005bac:	a3200008 	.word	0xa3200008

08005bb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bfe:	6053      	str	r3, [r2, #4]
 8005c00:	e009      	b.n	8005c16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d106      	bne.n	8005c16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c54:	2064      	movs	r0, #100	; 0x64
 8005c56:	f7fb f953 	bl	8000f00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c68:	200a      	movs	r0, #10
 8005c6a:	f7fb f949 	bl	8000f00 <HAL_Delay>

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <USB_DriveVbus+0x44>
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d106      	bne.n	8005cbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc6:	d109      	bne.n	8005cdc <USB_DriveVbus+0x64>
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0c5b      	lsrs	r3, r3, #17
 8005d08:	f003 0303 	and.w	r3, r3, #3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	b29b      	uxth	r3, r3
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70bb      	strb	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d87e      	bhi.n	8005e78 <USB_HC_Init+0x13c>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <USB_HC_Init+0x44>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005e3b 	.word	0x08005e3b
 8005d88:	08005d91 	.word	0x08005d91
 8005d8c:	08005dfd 	.word	0x08005dfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005da2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005da4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da10      	bge.n	8005dce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005dcc:	e057      	b.n	8005e7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d051      	beq.n	8005e7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005df8:	60d3      	str	r3, [r2, #12]
      break;
 8005dfa:	e040      	b.n	8005e7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da34      	bge.n	8005e82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e38:	e023      	b.n	8005e82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	461a      	mov	r2, r3
 8005e48:	f240 2325 	movw	r3, #549	; 0x225
 8005e4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da17      	bge.n	8005e86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e76:	e006      	b.n	8005e86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e7c:	e004      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e002      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e86:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	6939      	ldr	r1, [r7, #16]
 8005ebe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ed2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da03      	bge.n	8005ee2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e001      	b.n	8005ee6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff feff 	bl	8005cea <USB_GetHostSpeed>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d106      	bne.n	8005f04 <USB_HC_Init+0x1c8>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d003      	beq.n	8005f04 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f08:	787b      	ldrb	r3, [r7, #1]
 8005f0a:	059b      	lsls	r3, r3, #22
 8005f0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	02db      	lsls	r3, r3, #11
 8005f14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f1e:	049b      	lsls	r3, r3, #18
 8005f20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	0159      	lsls	r1, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	440b      	add	r3, r1
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f44:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d003      	beq.n	8005f56 <USB_HC_Init+0x21a>
 8005f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10f      	bne.n	8005f76 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f74:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02d      	beq.n	8006006 <USB_HC_StartXfer+0x86>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	791b      	ldrb	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d129      	bne.n	8006006 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d117      	bne.n	8005fe8 <USB_HC_StartXfer+0x68>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	79db      	ldrb	r3, [r3, #7]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <USB_HC_StartXfer+0x48>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	79db      	ldrb	r3, [r3, #7]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d10f      	bne.n	8005fe8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <USB_HC_StartXfer+0x86>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	795b      	ldrb	r3, [r3, #5]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d107      	bne.n	8006006 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fa0f 	bl	8006420 <USB_DoPing>
      return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e0f8      	b.n	80061f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	8912      	ldrh	r2, [r2, #8]
 8006016:	4413      	add	r3, r2
 8006018:	3b01      	subs	r3, #1
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	8912      	ldrh	r2, [r2, #8]
 800601e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006022:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006024:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006026:	8b7b      	ldrh	r3, [r7, #26]
 8006028:	429a      	cmp	r2, r3
 800602a:	d90b      	bls.n	8006044 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800602c:	8b7b      	ldrh	r3, [r7, #26]
 800602e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	8912      	ldrh	r2, [r2, #8]
 8006036:	fb03 f202 	mul.w	r2, r3, r2
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	611a      	str	r2, [r3, #16]
 800603e:	e001      	b.n	8006044 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800604c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	611a      	str	r2, [r3, #16]
 800605a:	e003      	b.n	8006064 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800606c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800606e:	04d9      	lsls	r1, r3, #19
 8006070:	4b63      	ldr	r3, [pc, #396]	; (8006200 <USB_HC_StartXfer+0x280>)
 8006072:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006074:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7a9b      	ldrb	r3, [r3, #10]
 800607a:	075b      	lsls	r3, r3, #29
 800607c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	0148      	lsls	r0, r1, #5
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	4401      	add	r1, r0
 8006088:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800608c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800608e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	68d9      	ldr	r1, [r3, #12]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a6:	460a      	mov	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	7e7b      	ldrb	r3, [r7, #25]
 80060f2:	075b      	lsls	r3, r3, #29
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	0148      	lsls	r0, r1, #5
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	4401      	add	r1, r0
 80060fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800611a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78db      	ldrb	r3, [r3, #3]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	e003      	b.n	8006136 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006134:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800613c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	461a      	mov	r2, r3
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e04e      	b.n	80061f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	78db      	ldrb	r3, [r3, #3]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d149      	bne.n	80061f6 <USB_HC_StartXfer+0x276>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d045      	beq.n	80061f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	79db      	ldrb	r3, [r3, #7]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d830      	bhi.n	80061d4 <USB_HC_StartXfer+0x254>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <USB_HC_StartXfer+0x1f8>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	080061ad 	.word	0x080061ad
 8006180:	08006189 	.word	0x08006189
 8006184:	080061ad 	.word	0x080061ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	3303      	adds	r3, #3
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006192:	8afa      	ldrh	r2, [r7, #22]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	b29b      	uxth	r3, r3
 800619a:	429a      	cmp	r2, r3
 800619c:	d91c      	bls.n	80061d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061aa:	e015      	b.n	80061d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	3303      	adds	r3, #3
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061b6:	8afa      	ldrh	r2, [r7, #22]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90a      	bls.n	80061dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80061d2:	e003      	b.n	80061dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <USB_HC_StartXfer+0x25e>
        break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <USB_HC_StartXfer+0x25e>
        break;
 80061dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	785a      	ldrb	r2, [r3, #1]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2000      	movs	r0, #0
 80061ee:	9000      	str	r0, [sp, #0]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fb31 	bl	8005858 <USB_WritePacket>
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	; 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	b29b      	uxth	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006226:	b480      	push	{r7}
 8006228:	b089      	sub	sp, #36	; 0x24
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0c9b      	lsrs	r3, r3, #18
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	0fdb      	lsrs	r3, r3, #31
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d104      	bne.n	8006280 <USB_HC_Halt+0x5a>
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e0c8      	b.n	8006412 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <USB_HC_Halt+0x66>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d163      	bne.n	8006354 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80ab 	bne.w	8006410 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d133      	bne.n	800632e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006304:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006312:	d81d      	bhi.n	8006350 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632a:	d0ec      	beq.n	8006306 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800632c:	e070      	b.n	8006410 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800634c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800634e:	e05f      	b.n	8006410 <USB_HC_Halt+0x1ea>
            break;
 8006350:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006352:	e05d      	b.n	8006410 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006372:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d133      	bne.n	80063ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	d81d      	bhi.n	800640e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e8:	d0ec      	beq.n	80063c4 <USB_HC_Halt+0x19e>
 80063ea:	e011      	b.n	8006410 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e000      	b.n	8006410 <USB_HC_Halt+0x1ea>
          break;
 800640e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	; 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006434:	2301      	movs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	04da      	lsls	r2, r3, #19
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <USB_DoPing+0x74>)
 800643e:	4013      	ands	r3, r2
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	440a      	add	r2, r1
 8006448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006450:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006468:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006470:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	1ff80000 	.word	0x1ff80000

08006498 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f911 	bl	80056d4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064b2:	2110      	movs	r1, #16
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff f96b 	bl	8005790 <USB_FlushTxFifo>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f997 	bl	80057f8 <USB_FlushRxFifo>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e01f      	b.n	800651a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006500:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	461a      	mov	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3301      	adds	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d9dc      	bls.n	80064da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e034      	b.n	8006590 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800654c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656c:	d80c      	bhi.n	8006588 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006584:	d0ec      	beq.n	8006560 <USB_StopHost+0xc8>
 8006586:	e000      	b.n	800658a <USB_StopHost+0xf2>
        break;
 8006588:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3301      	adds	r3, #1
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d9c7      	bls.n	8006526 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff f880 	bl	80056b2 <USB_EnableGlobalInt>

  return ret;
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b089      	sub	sp, #36	; 0x24
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065c4:	2301      	movs	r3, #1
 80065c6:	2202      	movs	r2, #2
 80065c8:	2102      	movs	r1, #2
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fc66 	bl	8006e9c <USBH_FindInterface>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d002      	beq.n	80065e0 <USBH_CDC_InterfaceInit+0x24>
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d901      	bls.n	80065e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065e0:	2302      	movs	r3, #2
 80065e2:	e13d      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc3b 	bl	8006e64 <USBH_SelectInterface>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065f8:	2302      	movs	r3, #2
 80065fa:	e131      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006602:	2050      	movs	r0, #80	; 0x50
 8006604:	f002 fad2 	bl	8008bac <malloc>
 8006608:	4603      	mov	r3, r0
 800660a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800661c:	2302      	movs	r3, #2
 800661e:	e11f      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006620:	2250      	movs	r2, #80	; 0x50
 8006622:	2100      	movs	r1, #0
 8006624:	68b8      	ldr	r0, [r7, #8]
 8006626:	f002 fb7d 	bl	8008d24 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	211a      	movs	r1, #26
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b25b      	sxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	da15      	bge.n	800666e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	211a      	movs	r1, #26
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	211a      	movs	r1, #26
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 ff2e 	bl	80084d6 <USBH_AllocPipe>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	7858      	ldrb	r0, [r3, #1]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	8952      	ldrh	r2, [r2, #10]
 800669a:	9202      	str	r2, [sp, #8]
 800669c:	2203      	movs	r2, #3
 800669e:	9201      	str	r2, [sp, #4]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4623      	mov	r3, r4
 80066a4:	4602      	mov	r2, r0
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fee6 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2200      	movs	r2, #0
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 f9f5 	bl	8008aa4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	210a      	movs	r1, #10
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fbeb 	bl	8006e9c <USBH_FindInterface>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	d002      	beq.n	80066d6 <USBH_CDC_InterfaceInit+0x11a>
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d901      	bls.n	80066da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0c2      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da16      	bge.n	8006720 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	211a      	movs	r1, #26
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	211a      	movs	r1, #26
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	835a      	strh	r2, [r3, #26]
 800671e:	e015      	b.n	800674c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	211a      	movs	r1, #26
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	4413      	add	r3, r2
 800672c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	211a      	movs	r1, #26
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	211a      	movs	r1, #26
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	f203 3356 	addw	r3, r3, #854	; 0x356
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b25b      	sxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	da16      	bge.n	8006792 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	211a      	movs	r1, #26
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	211a      	movs	r1, #26
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800678a:	881a      	ldrh	r2, [r3, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	835a      	strh	r2, [r3, #26]
 8006790:	e015      	b.n	80067be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	211a      	movs	r1, #26
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	211a      	movs	r1, #26
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	7b9b      	ldrb	r3, [r3, #14]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fe86 	bl	80084d6 <USBH_AllocPipe>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7bdb      	ldrb	r3, [r3, #15]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fe7c 	bl	80084d6 <USBH_AllocPipe>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7b59      	ldrb	r1, [r3, #13]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	7b98      	ldrb	r0, [r3, #14]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	8b12      	ldrh	r2, [r2, #24]
 80067fe:	9202      	str	r2, [sp, #8]
 8006800:	2202      	movs	r2, #2
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4623      	mov	r3, r4
 8006808:	4602      	mov	r2, r0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fe34 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7b19      	ldrb	r1, [r3, #12]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7bd8      	ldrb	r0, [r3, #15]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	8b52      	ldrh	r2, [r2, #26]
 8006828:	9202      	str	r2, [sp, #8]
 800682a:	2202      	movs	r2, #2
 800682c:	9201      	str	r2, [sp, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4623      	mov	r3, r4
 8006832:	4602      	mov	r2, r0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe1f 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	7b5b      	ldrb	r3, [r3, #13]
 8006846:	2200      	movs	r2, #0
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 f92a 	bl	8008aa4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	7b1b      	ldrb	r3, [r3, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 f923 	bl	8008aa4 <USBH_LL_SetToggle>

  return USBH_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bd90      	pop	{r4, r7, pc}

08006868 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 fe14 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fe3f 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7b1b      	ldrb	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fe01 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fe2c 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	7b5b      	ldrb	r3, [r3, #13]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	7b5b      	ldrb	r3, [r3, #13]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fdee 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe19 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	4618      	mov	r0, r3
 8006902:	f002 f95b 	bl	8008bbc <free>
    phost->pActiveClass->pData = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690c:	2200      	movs	r2, #0
 800690e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3340      	adds	r3, #64	; 0x40
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8b1 	bl	8006a9a <GetLineCoding>
 8006938:	4603      	mov	r3, r0
 800693a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006948:	2102      	movs	r1, #2
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800694e:	7afb      	ldrb	r3, [r7, #11]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006978:	2b04      	cmp	r3, #4
 800697a:	d877      	bhi.n	8006a6c <USBH_CDC_Process+0x114>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <USBH_CDC_Process+0x2c>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	08006999 	.word	0x08006999
 8006988:	0800699f 	.word	0x0800699f
 800698c:	080069cf 	.word	0x080069cf
 8006990:	08006a43 	.word	0x08006a43
 8006994:	08006a51 	.word	0x08006a51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
      break;
 800699c:	e06d      	b.n	8006a7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f897 	bl	8006ad8 <SetLineCoding>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069bc:	e058      	b.n	8006a70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d055      	beq.n	8006a70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2204      	movs	r2, #4
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069cc:	e050      	b.n	8006a70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3340      	adds	r3, #64	; 0x40
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f860 	bl	8006a9a <GetLineCoding>
 80069da:	4603      	mov	r3, r0
 80069dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d126      	bne.n	8006a32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f6:	791b      	ldrb	r3, [r3, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d13b      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d133      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d12b      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d124      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f958 	bl	8006ce0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a30:	e020      	b.n	8006a74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d01d      	beq.n	8006a74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a40:	e018      	b.n	8006a74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f867 	bl	8006b16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8da 	bl	8006c02 <CDC_ProcessReception>
      break;
 8006a4e:	e014      	b.n	8006a7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ffef 	bl	8007a36 <USBH_ClrFeature>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a6a:	e005      	b.n	8006a78 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a78:	bf00      	nop

  }

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	22a1      	movs	r2, #161	; 0xa1
 8006aa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fa83 	bl	8007fd4 <USBH_CtlReq>
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2207      	movs	r2, #7
 8006afe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2207      	movs	r2, #7
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fa64 	bl	8007fd4 <USBH_CtlReq>
 8006b0c:	4603      	mov	r3, r0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af02      	add	r7, sp, #8
 8006b1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d002      	beq.n	8006b3c <CDC_ProcessTransmission+0x26>
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d023      	beq.n	8006b82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b3a:	e05e      	b.n	8006bfa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	8b12      	ldrh	r2, [r2, #24]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d90b      	bls.n	8006b60 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8b1a      	ldrh	r2, [r3, #24]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	7b5b      	ldrb	r3, [r3, #13]
 8006b54:	2001      	movs	r0, #1
 8006b56:	9000      	str	r0, [sp, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fc4a 	bl	80083f2 <USBH_BulkSendData>
 8006b5e:	e00b      	b.n	8006b78 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	7b5b      	ldrb	r3, [r3, #13]
 8006b6e:	2001      	movs	r0, #1
 8006b70:	9000      	str	r0, [sp, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fc3d 	bl	80083f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b80:	e03b      	b.n	8006bfa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	7b5b      	ldrb	r3, [r3, #13]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 ff61 	bl	8008a50 <USBH_LL_GetURBState>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d128      	bne.n	8006bea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	8b12      	ldrh	r2, [r2, #24]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d90e      	bls.n	8006bc2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	8b12      	ldrh	r2, [r2, #24]
 8006bac:	1a9a      	subs	r2, r3, r2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	8b12      	ldrh	r2, [r2, #24]
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	61da      	str	r2, [r3, #28]
 8006bc0:	e002      	b.n	8006bc8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bd8:	e00e      	b.n	8006bf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f868 	bl	8006cb8 <USBH_CDC_TransmitCallback>
      break;
 8006be8:	e006      	b.n	8006bf8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d103      	bne.n	8006bf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bf8:	bf00      	nop
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d002      	beq.n	8006c28 <CDC_ProcessReception+0x26>
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d00e      	beq.n	8006c44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c26:	e043      	b.n	8006cb0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6a19      	ldr	r1, [r3, #32]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	8b5a      	ldrh	r2, [r3, #26]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fc01 	bl	800843c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c42:	e035      	b.n	8006cb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 ff00 	bl	8008a50 <USBH_LL_GetURBState>
 8006c50:	4603      	mov	r3, r0
 8006c52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c54:	7cfb      	ldrb	r3, [r7, #19]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d129      	bne.n	8006cae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	7b1b      	ldrb	r3, [r3, #12]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fe63 	bl	800892c <USBH_LL_GetLastXferSize>
 8006c66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d016      	beq.n	8006ca0 <CDC_ProcessReception+0x9e>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	8b5b      	ldrh	r3, [r3, #26]
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d910      	bls.n	8006ca0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a1a      	ldr	r2, [r3, #32]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	441a      	add	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c9e:	e006      	b.n	8006cae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f80f 	bl	8006ccc <USBH_CDC_ReceiveCallback>
      break;
 8006cae:	bf00      	nop
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e029      	b.n	8006d60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	79fa      	ldrb	r2, [r7, #7]
 8006d10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f81f 	bl	8006d68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 fd33 	bl	80087c4 <USBH_LL_Init>

  return USBH_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e009      	b.n	8006d8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	33e0      	adds	r3, #224	; 0xe0
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9f2      	bls.n	8006d7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e009      	b.n	8006dae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db4:	d3f1      	bcc.n	8006d9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2240      	movs	r2, #64	; 0x40
 8006dda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10e      	bne.n	8006e4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	33de      	adds	r3, #222	; 0xde
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
 8006e4a:	e004      	b.n	8006e56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e001      	b.n	8006e56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d204      	bcs.n	8006e8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e88:	e001      	b.n	8006e8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	70fb      	strb	r3, [r7, #3]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70bb      	strb	r3, [r7, #2]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ec4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ec6:	e025      	b.n	8006f14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	221a      	movs	r2, #26
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	795b      	ldrb	r3, [r3, #5]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <USBH_FindInterface+0x4e>
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d111      	bne.n	8006f0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eee:	78ba      	ldrb	r2, [r7, #2]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ef4:	78bb      	ldrb	r3, [r7, #2]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d109      	bne.n	8006f0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efe:	787a      	ldrb	r2, [r7, #1]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d002      	beq.n	8006f0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f04:	787b      	ldrb	r3, [r7, #1]
 8006f06:	2bff      	cmp	r3, #255	; 0xff
 8006f08:	d101      	bne.n	8006f0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	e006      	b.n	8006f1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	3301      	adds	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d9d6      	bls.n	8006ec8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f1a:	23ff      	movs	r3, #255	; 0xff
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fc83 	bl	800883c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f36:	2101      	movs	r1, #1
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fd9c 	bl	8008a76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af04      	add	r7, sp, #16
 8006f4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d102      	bne.n	8006f6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b0b      	cmp	r3, #11
 8006f72:	f200 81be 	bhi.w	80072f2 <USBH_Process+0x3aa>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <USBH_Process+0x34>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fad 	.word	0x08006fad
 8006f80:	08006fdf 	.word	0x08006fdf
 8006f84:	08007047 	.word	0x08007047
 8006f88:	0800728d 	.word	0x0800728d
 8006f8c:	080072f3 	.word	0x080072f3
 8006f90:	080070eb 	.word	0x080070eb
 8006f94:	08007233 	.word	0x08007233
 8006f98:	08007121 	.word	0x08007121
 8006f9c:	08007141 	.word	0x08007141
 8006fa0:	08007161 	.word	0x08007161
 8006fa4:	080071a5 	.word	0x080071a5
 8006fa8:	08007275 	.word	0x08007275
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 819e 	beq.w	80072f6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fc0:	20c8      	movs	r0, #200	; 0xc8
 8006fc2:	f001 fd9f 	bl	8008b04 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fc95 	bl	80088f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fdc:	e18b      	b.n	80072f6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ff6:	e18d      	b.n	8007314 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007002:	d914      	bls.n	800702e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800700a:	3301      	adds	r3, #1
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800701a:	2b03      	cmp	r3, #3
 800701c:	d903      	bls.n	8007026 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	220d      	movs	r2, #13
 8007022:	701a      	strb	r2, [r3, #0]
      break;
 8007024:	e176      	b.n	8007314 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
      break;
 800702c:	e172      	b.n	8007314 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007034:	f103 020a 	add.w	r2, r3, #10
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800703e:	200a      	movs	r0, #10
 8007040:	f001 fd60 	bl	8008b04 <USBH_Delay>
      break;
 8007044:	e166      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007056:	2104      	movs	r1, #4
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800705c:	2064      	movs	r0, #100	; 0x64
 800705e:	f001 fd51 	bl	8008b04 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fc20 	bl	80088a8 <USBH_LL_GetSpeed>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2205      	movs	r2, #5
 8007076:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fa2b 	bl	80084d6 <USBH_AllocPipe>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fa23 	bl	80084d6 <USBH_AllocPipe>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7919      	ldrb	r1, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070ac:	b292      	uxth	r2, r2
 80070ae:	9202      	str	r2, [sp, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	9201      	str	r2, [sp, #4]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4603      	mov	r3, r0
 80070b8:	2280      	movs	r2, #128	; 0x80
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f9dc 	bl	8008478 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7959      	ldrb	r1, [r3, #5]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070d4:	b292      	uxth	r2, r2
 80070d6:	9202      	str	r2, [sp, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	9201      	str	r2, [sp, #4]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4603      	mov	r3, r0
 80070e0:	2200      	movs	r2, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f9c8 	bl	8008478 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070e8:	e114      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f918 	bl	8007320 <USBH_HandleEnum>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 80fe 	bne.w	80072fa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800710c:	2b01      	cmp	r3, #1
 800710e:	d103      	bne.n	8007118 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2208      	movs	r2, #8
 8007114:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007116:	e0f0      	b.n	80072fa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2207      	movs	r2, #7
 800711c:	701a      	strb	r2, [r3, #0]
      break;
 800711e:	e0ec      	b.n	80072fa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80e9 	beq.w	80072fe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007132:	2101      	movs	r1, #1
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2208      	movs	r2, #8
 800713c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800713e:	e0de      	b.n	80072fe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007146:	b29b      	uxth	r3, r3
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fc2c 	bl	80079a8 <USBH_SetCfg>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 80d5 	bne.w	8007302 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2209      	movs	r2, #9
 800715c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800715e:	e0d0      	b.n	8007302 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800716e:	2101      	movs	r1, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc3c 	bl	80079ee <USBH_SetFeature>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220a      	movs	r2, #10
 8007186:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007188:	e0bd      	b.n	8007306 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	f040 80b9 	bne.w	8007306 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220a      	movs	r2, #10
 8007198:	701a      	strb	r2, [r3, #0]
      break;
 800719a:	e0b4      	b.n	8007306 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220a      	movs	r2, #10
 80071a0:	701a      	strb	r2, [r3, #0]
      break;
 80071a2:	e0b0      	b.n	8007306 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80ad 	beq.w	800730a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	e016      	b.n	80071ec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071be:	7bfa      	ldrb	r2, [r7, #15]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	32de      	adds	r2, #222	; 0xde
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	791a      	ldrb	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d108      	bne.n	80071e6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32de      	adds	r2, #222	; 0xde
 80071da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071e4:	e005      	b.n	80071f2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	3301      	adds	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0e5      	beq.n	80071be <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2206      	movs	r2, #6
 8007212:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800721a:	2103      	movs	r1, #3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007220:	e073      	b.n	800730a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	220d      	movs	r2, #13
 8007226:	701a      	strb	r2, [r3, #0]
      break;
 8007228:	e06f      	b.n	800730a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	220d      	movs	r2, #13
 800722e:	701a      	strb	r2, [r3, #0]
      break;
 8007230:	e06b      	b.n	800730a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220b      	movs	r2, #11
 8007258:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800725a:	e058      	b.n	800730e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d154      	bne.n	800730e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220d      	movs	r2, #13
 8007268:	701a      	strb	r2, [r3, #0]
      break;
 800726a:	e050      	b.n	800730e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	220d      	movs	r2, #13
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e04c      	b.n	800730e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d049      	beq.n	8007312 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      }
      break;
 800728a:	e042      	b.n	8007312 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fd67 	bl	8006d68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d009      	beq.n	80072b8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c8:	2105      	movs	r1, #5
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d107      	bne.n	80072ea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fe20 	bl	8006f28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072e8:	e014      	b.n	8007314 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 faa6 	bl	800883c <USBH_LL_Start>
      break;
 80072f0:	e010      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80072f2:	bf00      	nop
 80072f4:	e00e      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 80072f6:	bf00      	nop
 80072f8:	e00c      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 80072fa:	bf00      	nop
 80072fc:	e00a      	b.n	8007314 <USBH_Process+0x3cc>
    break;
 80072fe:	bf00      	nop
 8007300:	e008      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007302:	bf00      	nop
 8007304:	e006      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007312:	bf00      	nop
  }
  return USBH_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af04      	add	r7, sp, #16
 8007326:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800732c:	2301      	movs	r3, #1
 800732e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b07      	cmp	r3, #7
 8007336:	f200 81c1 	bhi.w	80076bc <USBH_HandleEnum+0x39c>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <USBH_HandleEnum+0x20>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007361 	.word	0x08007361
 8007344:	0800741f 	.word	0x0800741f
 8007348:	08007489 	.word	0x08007489
 800734c:	08007517 	.word	0x08007517
 8007350:	08007581 	.word	0x08007581
 8007354:	080075f1 	.word	0x080075f1
 8007358:	08007637 	.word	0x08007637
 800735c:	0800767d 	.word	0x0800767d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007360:	2108      	movs	r1, #8
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa50 	bl	8007808 <USBH_Get_DevDesc>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d130      	bne.n	80073d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	7919      	ldrb	r1, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007396:	b292      	uxth	r2, r2
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4603      	mov	r3, r0
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f867 	bl	8008478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7959      	ldrb	r1, [r3, #5]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073be:	b292      	uxth	r2, r2
 80073c0:	9202      	str	r2, [sp, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	9201      	str	r2, [sp, #4]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4603      	mov	r3, r0
 80073ca:	2200      	movs	r2, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f853 	bl	8008478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073d2:	e175      	b.n	80076c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	f040 8172 	bne.w	80076c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d903      	bls.n	80073fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	220d      	movs	r2, #13
 80073fa:	701a      	strb	r2, [r3, #0]
      break;
 80073fc:	e160      	b.n	80076c0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	795b      	ldrb	r3, [r3, #5]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f887 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	791b      	ldrb	r3, [r3, #4]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f881 	bl	8008518 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
      break;
 800741c:	e150      	b.n	80076c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800741e:	2112      	movs	r1, #18
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9f1 	bl	8007808 <USBH_Get_DevDesc>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007436:	e145      	b.n	80076c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b03      	cmp	r3, #3
 800743c:	f040 8142 	bne.w	80076c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007446:	3301      	adds	r3, #1
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007456:	2b03      	cmp	r3, #3
 8007458:	d903      	bls.n	8007462 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	220d      	movs	r2, #13
 800745e:	701a      	strb	r2, [r3, #0]
      break;
 8007460:	e130      	b.n	80076c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f855 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f84f 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	e11d      	b.n	80076c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007488:	2101      	movs	r1, #1
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa68 	bl	8007960 <USBH_SetAddress>
 8007490:	4603      	mov	r3, r0
 8007492:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d132      	bne.n	8007500 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800749a:	2002      	movs	r0, #2
 800749c:	f001 fb32 	bl	8008b04 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7919      	ldrb	r1, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074c2:	b292      	uxth	r2, r2
 80074c4:	9202      	str	r2, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	9201      	str	r2, [sp, #4]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 ffd1 	bl	8008478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7959      	ldrb	r1, [r3, #5]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ea:	b292      	uxth	r2, r2
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4603      	mov	r3, r0
 80074f6:	2200      	movs	r2, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 ffbd 	bl	8008478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074fe:	e0e3      	b.n	80076c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b03      	cmp	r3, #3
 8007504:	f040 80e0 	bne.w	80076c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	220d      	movs	r2, #13
 800750c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	705a      	strb	r2, [r3, #1]
      break;
 8007514:	e0d8      	b.n	80076c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007516:	2109      	movs	r1, #9
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f99d 	bl	8007858 <USBH_Get_CfgDesc>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800752e:	e0cd      	b.n	80076cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 80ca 	bne.w	80076cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754e:	2b03      	cmp	r3, #3
 8007550:	d903      	bls.n	800755a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e0b8      	b.n	80076cc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 ffd9 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 ffd3 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e0a5      	b.n	80076cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f965 	bl	8007858 <USBH_Get_CfgDesc>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2205      	movs	r2, #5
 800759c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800759e:	e097      	b.n	80076d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	f040 8094 	bne.w	80076d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d903      	bls.n	80075ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	220d      	movs	r2, #13
 80075c6:	701a      	strb	r2, [r3, #0]
      break;
 80075c8:	e082      	b.n	80076d0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 ffa1 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 ff9b 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
      break;
 80075ee:	e06f      	b.n	80076d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d019      	beq.n	800762e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007606:	23ff      	movs	r3, #255	; 0xff
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f949 	bl	80078a0 <USBH_Get_StringDesc>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2206      	movs	r2, #6
 800761c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800761e:	e059      	b.n	80076d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d156      	bne.n	80076d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2206      	movs	r2, #6
 800762a:	705a      	strb	r2, [r3, #1]
      break;
 800762c:	e052      	b.n	80076d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2206      	movs	r2, #6
 8007632:	705a      	strb	r2, [r3, #1]
      break;
 8007634:	e04e      	b.n	80076d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800763c:	2b00      	cmp	r3, #0
 800763e:	d019      	beq.n	8007674 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800764c:	23ff      	movs	r3, #255	; 0xff
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f926 	bl	80078a0 <USBH_Get_StringDesc>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2207      	movs	r2, #7
 8007662:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007664:	e038      	b.n	80076d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d135      	bne.n	80076d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2207      	movs	r2, #7
 8007670:	705a      	strb	r2, [r3, #1]
      break;
 8007672:	e031      	b.n	80076d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2207      	movs	r2, #7
 8007678:	705a      	strb	r2, [r3, #1]
      break;
 800767a:	e02d      	b.n	80076d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007692:	23ff      	movs	r3, #255	; 0xff
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f903 	bl	80078a0 <USBH_Get_StringDesc>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076a8:	e018      	b.n	80076dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d115      	bne.n	80076dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e012      	b.n	80076dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ba:	e00f      	b.n	80076dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076bc:	bf00      	nop
 80076be:	e00e      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c0:	bf00      	nop
 80076c2:	e00c      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c4:	bf00      	nop
 80076c6:	e00a      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c8:	bf00      	nop
 80076ca:	e008      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076cc:	bf00      	nop
 80076ce:	e006      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d0:	bf00      	nop
 80076d2:	e004      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
  }
  return Status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f804 	bl	800772a <USBH_HandleSof>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b0b      	cmp	r3, #11
 800773a:	d10a      	bne.n	8007752 <USBH_HandleSof+0x28>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
  }
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800776a:	bf00      	nop
}
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007786:	bf00      	nop
}
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f846 	bl	8008872 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fe93 	bl	8008518 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fe8d 	bl	8008518 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af02      	add	r7, sp, #8
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	b29b      	uxth	r3, r3
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f864 	bl	80078f6 <USBH_GetDescriptor>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	b292      	uxth	r2, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f000 f919 	bl	8007a80 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af02      	add	r7, sp, #8
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	331c      	adds	r3, #28
 8007868:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800786a:	887b      	ldrh	r3, [r7, #2]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f83d 	bl	80078f6 <USBH_GetDescriptor>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	461a      	mov	r2, r3
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f989 	bl	8007ba4 <USBH_ParseCfgDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	461a      	mov	r2, r3
 80078ac:	460b      	mov	r3, r1
 80078ae:	72fb      	strb	r3, [r7, #11]
 80078b0:	4613      	mov	r3, r2
 80078b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	460b      	mov	r3, r1
 80078ca:	2100      	movs	r1, #0
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f812 	bl	80078f6 <USBH_GetDescriptor>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078e2:	893a      	ldrh	r2, [r7, #8]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fb26 	bl	8007f38 <USBH_ParseStringDesc>
  }

  return status;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	607b      	str	r3, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	72fb      	strb	r3, [r7, #11]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d11c      	bne.n	800794a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2206      	movs	r2, #6
 8007920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	893a      	ldrh	r2, [r7, #8]
 8007926:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007928:	893b      	ldrh	r3, [r7, #8]
 800792a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d104      	bne.n	800793e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f240 4209 	movw	r2, #1033	; 0x409
 800793a:	829a      	strh	r2, [r3, #20]
 800793c:	e002      	b.n	8007944 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8b3a      	ldrh	r2, [r7, #24]
 8007948:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800794a:	8b3b      	ldrh	r3, [r7, #24]
 800794c:	461a      	mov	r2, r3
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb3f 	bl	8007fd4 <USBH_CtlReq>
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	789b      	ldrb	r3, [r3, #2]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10f      	bne.n	8007994 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2205      	movs	r2, #5
 800797e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb1b 	bl	8007fd4 <USBH_CtlReq>
 800799e:	4603      	mov	r3, r0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	789b      	ldrb	r3, [r3, #2]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10e      	bne.n	80079da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2209      	movs	r2, #9
 80079c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 faf8 	bl	8007fd4 <USBH_CtlReq>
 80079e4:	4603      	mov	r3, r0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10f      	bne.n	8007a22 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2100      	movs	r1, #0
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fad4 	bl	8007fd4 <USBH_CtlReq>
 8007a2c:	4603      	mov	r3, r0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	789b      	ldrb	r3, [r3, #2]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d10f      	bne.n	8007a6a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fab0 	bl	8007fd4 <USBH_CtlReq>
 8007a74:	4603      	mov	r3, r0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	785a      	ldrb	r2, [r3, #1]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3303      	adds	r3, #3
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	791a      	ldrb	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	795a      	ldrb	r2, [r3, #5]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	799a      	ldrb	r2, [r3, #6]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	79da      	ldrb	r2, [r3, #7]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	79db      	ldrb	r3, [r3, #7]
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	dc0f      	bgt.n	8007b02 <USBH_ParseDevDesc+0x82>
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	db14      	blt.n	8007b10 <USBH_ParseDevDesc+0x90>
 8007ae6:	3b08      	subs	r3, #8
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <USBH_ParseDevDesc+0x120>)
 8007aea:	fa22 f303 	lsr.w	r3, r2, r3
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <USBH_ParseDevDesc+0x86>
 8007b00:	e006      	b.n	8007b10 <USBH_ParseDevDesc+0x90>
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d104      	bne.n	8007b10 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	79da      	ldrb	r2, [r3, #7]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	71da      	strb	r2, [r3, #7]
      break;
 8007b0e:	e003      	b.n	8007b18 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2240      	movs	r2, #64	; 0x40
 8007b14:	71da      	strb	r2, [r3, #7]
      break;
 8007b16:	bf00      	nop
  }

  if (length > 8U)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d939      	bls.n	8007b92 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3308      	adds	r3, #8
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3309      	adds	r3, #9
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	330a      	adds	r3, #10
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	330b      	adds	r3, #11
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	330d      	adds	r3, #13
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	7b9a      	ldrb	r2, [r3, #14]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	7bda      	ldrb	r2, [r3, #15]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	7c1a      	ldrb	r2, [r3, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	7c5a      	ldrb	r2, [r3, #17]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	745a      	strb	r2, [r3, #17]
  }
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	01000101 	.word	0x01000101

08007ba4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	; 0x30
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bb8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785a      	ldrb	r2, [r3, #1]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3302      	adds	r3, #2
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3303      	adds	r3, #3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	bf28      	it	cs
 8007c02:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	791a      	ldrb	r2, [r3, #4]
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	795a      	ldrb	r2, [r3, #5]
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	799a      	ldrb	r2, [r3, #6]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	79da      	ldrb	r2, [r3, #7]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	7a1a      	ldrb	r2, [r3, #8]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d002      	beq.n	8007c42 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	2209      	movs	r2, #9
 8007c40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	f240 809d 	bls.w	8007d84 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c4a:	2309      	movs	r3, #9
 8007c4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c52:	e081      	b.n	8007d58 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c54:	f107 0316 	add.w	r3, r7, #22
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5c:	f000 f99f 	bl	8007f9e <USBH_GetNextDesc>
 8007c60:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d176      	bne.n	8007d58 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d002      	beq.n	8007c78 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	2209      	movs	r2, #9
 8007c76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	221a      	movs	r2, #26
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	3308      	adds	r3, #8
 8007c84:	6a3a      	ldr	r2, [r7, #32]
 8007c86:	4413      	add	r3, r2
 8007c88:	3302      	adds	r3, #2
 8007c8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8e:	69f8      	ldr	r0, [r7, #28]
 8007c90:	f000 f87e 	bl	8007d90 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c9e:	e043      	b.n	8007d28 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ca0:	f107 0316 	add.w	r3, r7, #22
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	f000 f979 	bl	8007f9e <USBH_GetNextDesc>
 8007cac:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d138      	bne.n	8007d28 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10f      	bne.n	8007cde <USBH_ParseCfgDesc+0x13a>
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	799b      	ldrb	r3, [r3, #6]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d10b      	bne.n	8007cde <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10f      	bne.n	8007cee <USBH_ParseCfgDesc+0x14a>
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d00b      	beq.n	8007cee <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2209      	movs	r2, #9
 8007cda:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cdc:	e007      	b.n	8007cee <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b07      	cmp	r3, #7
 8007ce4:	d004      	beq.n	8007cf0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2207      	movs	r2, #7
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e000      	b.n	8007cf0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cee:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	00d2      	lsls	r2, r2, #3
 8007cfc:	211a      	movs	r1, #26
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	4413      	add	r3, r2
 8007d04:	3308      	adds	r3, #8
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f86b 	bl	8007dee <USBH_ParseEPDesc>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d22:	3301      	adds	r3, #1
 8007d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d204      	bcs.n	8007d3e <USBH_ParseCfgDesc+0x19a>
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	885a      	ldrh	r2, [r3, #2]
 8007d38:	8afb      	ldrh	r3, [r7, #22]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d8b0      	bhi.n	8007ca0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d201      	bcs.n	8007d4e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e01c      	b.n	8007d88 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d52:	3301      	adds	r3, #1
 8007d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d805      	bhi.n	8007d6c <USBH_ParseCfgDesc+0x1c8>
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	885a      	ldrh	r2, [r3, #2]
 8007d64:	8afb      	ldrh	r3, [r7, #22]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	f63f af74 	bhi.w	8007c54 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf28      	it	cs
 8007d74:	2302      	movcs	r3, #2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d201      	bcs.n	8007d84 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e001      	b.n	8007d88 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3730      	adds	r7, #48	; 0x30
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	785a      	ldrb	r2, [r3, #1]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	789a      	ldrb	r2, [r3, #2]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	78da      	ldrb	r2, [r3, #3]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	791a      	ldrb	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	795a      	ldrb	r2, [r3, #5]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	799a      	ldrb	r2, [r3, #6]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	79da      	ldrb	r2, [r3, #7]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	7a1a      	ldrb	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	721a      	strb	r2, [r3, #8]
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	785a      	ldrb	r2, [r3, #1]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	789a      	ldrb	r2, [r3, #2]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	78da      	ldrb	r2, [r3, #3]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3304      	adds	r3, #4
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3305      	adds	r3, #5
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	799a      	ldrb	r2, [r3, #6]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	889b      	ldrh	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	75fb      	strb	r3, [r7, #23]
 8007e4e:	e033      	b.n	8007eb8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	889b      	ldrh	r3, [r3, #4]
 8007e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	889b      	ldrh	r3, [r3, #4]
 8007e66:	b21a      	sxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3305      	adds	r3, #5
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d110      	bne.n	8007eaa <USBH_ParseEPDesc+0xbc>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b299      	uxth	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3305      	adds	r3, #5
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	b21b      	sxth	r3, r3
 8007ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	e001      	b.n	8007eae <USBH_ParseEPDesc+0xc0>
 8007eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d116      	bne.n	8007ef0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d005      	beq.n	8007eda <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d127      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	799b      	ldrb	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <USBH_ParseEPDesc+0xfc>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	799b      	ldrb	r3, [r3, #6]
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	d91f      	bls.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007eea:	2303      	movs	r3, #3
 8007eec:	75fb      	strb	r3, [r7, #23]
 8007eee:	e01c      	b.n	8007f2a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	78db      	ldrb	r3, [r3, #3]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10a      	bne.n	8007f12 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	799b      	ldrb	r3, [r3, #6]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <USBH_ParseEPDesc+0x11e>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	799b      	ldrb	r3, [r3, #6]
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d90e      	bls.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	75fb      	strb	r3, [r7, #23]
 8007f10:	e00b      	b.n	8007f2a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	78db      	ldrb	r3, [r3, #3]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d105      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	799b      	ldrb	r3, [r3, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f26:	2303      	movs	r3, #3
 8007f28:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d120      	bne.n	8007f92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	1e9a      	subs	r2, r3, #2
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bf28      	it	cs
 8007f5c:	4613      	movcs	r3, r2
 8007f5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3302      	adds	r3, #2
 8007f64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f66:	2300      	movs	r3, #0
 8007f68:	82fb      	strh	r3, [r7, #22]
 8007f6a:	e00b      	b.n	8007f84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	3302      	adds	r3, #2
 8007f82:	82fb      	strh	r3, [r7, #22]
 8007f84:	8afa      	ldrh	r2, [r7, #22]
 8007f86:	8abb      	ldrh	r3, [r7, #20]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3ef      	bcc.n	8007f6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
  }
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	789b      	ldrb	r3, [r3, #2]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <USBH_CtlReq+0x20>
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d00f      	beq.n	8008012 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ff2:	e027      	b.n	8008044 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2202      	movs	r2, #2
 800800a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800800c:	2301      	movs	r3, #1
 800800e:	75fb      	strb	r3, [r7, #23]
      break;
 8008010:	e018      	b.n	8008044 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f81c 	bl	8008050 <USBH_HandleControl>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <USBH_CtlReq+0x54>
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d106      	bne.n	8008036 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	761a      	strb	r2, [r3, #24]
      break;
 8008034:	e005      	b.n	8008042 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d102      	bne.n	8008042 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	709a      	strb	r2, [r3, #2]
      break;
 8008042:	bf00      	nop
  }
  return status;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af02      	add	r7, sp, #8
 8008056:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008058:	2301      	movs	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7e1b      	ldrb	r3, [r3, #24]
 8008064:	3b01      	subs	r3, #1
 8008066:	2b0a      	cmp	r3, #10
 8008068:	f200 8156 	bhi.w	8008318 <USBH_HandleControl+0x2c8>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <USBH_HandleControl+0x24>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	080080a1 	.word	0x080080a1
 8008078:	080080bb 	.word	0x080080bb
 800807c:	08008125 	.word	0x08008125
 8008080:	0800814b 	.word	0x0800814b
 8008084:	08008183 	.word	0x08008183
 8008088:	080081ad 	.word	0x080081ad
 800808c:	080081ff 	.word	0x080081ff
 8008090:	08008221 	.word	0x08008221
 8008094:	0800825d 	.word	0x0800825d
 8008098:	08008283 	.word	0x08008283
 800809c:	080082c1 	.word	0x080082c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 0110 	add.w	r1, r3, #16
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f943 	bl	8008338 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	761a      	strb	r2, [r3, #24]
      break;
 80080b8:	e139      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fcc5 	bl	8008a50 <USBH_LL_GetURBState>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d11e      	bne.n	800810e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7c1b      	ldrb	r3, [r3, #16]
 80080d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8adb      	ldrh	r3, [r3, #22]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080e2:	7b7b      	ldrb	r3, [r7, #13]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d103      	bne.n	80080f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2203      	movs	r2, #3
 80080ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080ee:	e115      	b.n	800831c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2205      	movs	r2, #5
 80080f4:	761a      	strb	r2, [r3, #24]
      break;
 80080f6:	e111      	b.n	800831c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80080f8:	7b7b      	ldrb	r3, [r7, #13]
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d103      	bne.n	8008106 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2209      	movs	r2, #9
 8008102:	761a      	strb	r2, [r3, #24]
      break;
 8008104:	e10a      	b.n	800831c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2207      	movs	r2, #7
 800810a:	761a      	strb	r2, [r3, #24]
      break;
 800810c:	e106      	b.n	800831c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b04      	cmp	r3, #4
 8008112:	d003      	beq.n	800811c <USBH_HandleControl+0xcc>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b02      	cmp	r3, #2
 8008118:	f040 8100 	bne.w	800831c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	220b      	movs	r2, #11
 8008120:	761a      	strb	r2, [r3, #24]
      break;
 8008122:	e0fb      	b.n	800831c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6899      	ldr	r1, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	899a      	ldrh	r2, [r3, #12]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	791b      	ldrb	r3, [r3, #4]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f93a 	bl	80083b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2204      	movs	r2, #4
 8008146:	761a      	strb	r2, [r3, #24]
      break;
 8008148:	e0f1      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	791b      	ldrb	r3, [r3, #4]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc7d 	bl	8008a50 <USBH_LL_GetURBState>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d102      	bne.n	8008166 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2209      	movs	r2, #9
 8008164:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b05      	cmp	r3, #5
 800816a:	d102      	bne.n	8008172 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800816c:	2303      	movs	r3, #3
 800816e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008170:	e0d6      	b.n	8008320 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b04      	cmp	r3, #4
 8008176:	f040 80d3 	bne.w	8008320 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220b      	movs	r2, #11
 800817e:	761a      	strb	r2, [r3, #24]
      break;
 8008180:	e0ce      	b.n	8008320 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6899      	ldr	r1, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	899a      	ldrh	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	795b      	ldrb	r3, [r3, #5]
 800818e:	2001      	movs	r0, #1
 8008190:	9000      	str	r0, [sp, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8ea 	bl	800836c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2206      	movs	r2, #6
 80081a8:	761a      	strb	r2, [r3, #24]
      break;
 80081aa:	e0c0      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	795b      	ldrb	r3, [r3, #5]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc4c 	bl	8008a50 <USBH_LL_GetURBState>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d103      	bne.n	80081ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2207      	movs	r2, #7
 80081c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081c8:	e0ac      	b.n	8008324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b05      	cmp	r3, #5
 80081ce:	d105      	bne.n	80081dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220c      	movs	r2, #12
 80081d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
      break;
 80081da:	e0a3      	b.n	8008324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2205      	movs	r2, #5
 80081e6:	761a      	strb	r2, [r3, #24]
      break;
 80081e8:	e09c      	b.n	8008324 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	f040 8099 	bne.w	8008324 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	220b      	movs	r2, #11
 80081f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80081f8:	2302      	movs	r3, #2
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	e092      	b.n	8008324 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8d5 	bl	80083b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2208      	movs	r2, #8
 800821c:	761a      	strb	r2, [r3, #24]

      break;
 800821e:	e086      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fc12 	bl	8008a50 <USBH_LL_GetURBState>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220d      	movs	r2, #13
 800823a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008240:	e072      	b.n	8008328 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d103      	bne.n	8008250 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220b      	movs	r2, #11
 800824c:	761a      	strb	r2, [r3, #24]
      break;
 800824e:	e06b      	b.n	8008328 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b05      	cmp	r3, #5
 8008254:	d168      	bne.n	8008328 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
      break;
 800825a:	e065      	b.n	8008328 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	795b      	ldrb	r3, [r3, #5]
 8008260:	2201      	movs	r2, #1
 8008262:	9200      	str	r2, [sp, #0]
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f87f 	bl	800836c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008274:	b29a      	uxth	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220a      	movs	r2, #10
 800827e:	761a      	strb	r2, [r3, #24]
      break;
 8008280:	e055      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	795b      	ldrb	r3, [r3, #5]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fbe1 	bl	8008a50 <USBH_LL_GetURBState>
 800828e:	4603      	mov	r3, r0
 8008290:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d105      	bne.n	80082a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	220d      	movs	r2, #13
 80082a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082a2:	e043      	b.n	800832c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d103      	bne.n	80082b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2209      	movs	r2, #9
 80082ae:	761a      	strb	r2, [r3, #24]
      break;
 80082b0:	e03c      	b.n	800832c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d139      	bne.n	800832c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220b      	movs	r2, #11
 80082bc:	761a      	strb	r2, [r3, #24]
      break;
 80082be:	e035      	b.n	800832c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7e5b      	ldrb	r3, [r3, #25]
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	765a      	strb	r2, [r3, #25]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7e5b      	ldrb	r3, [r3, #25]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d806      	bhi.n	80082e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082e0:	e025      	b.n	800832e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e8:	2106      	movs	r1, #6
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	795b      	ldrb	r3, [r3, #5]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f90c 	bl	8008518 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f906 	bl	8008518 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	73fb      	strb	r3, [r7, #15]
      break;
 8008316:	e00a      	b.n	800832e <USBH_HandleControl+0x2de>

    default:
      break;
 8008318:	bf00      	nop
 800831a:	e008      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 800831c:	bf00      	nop
 800831e:	e006      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008320:	bf00      	nop
 8008322:	e004      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 800832c:	bf00      	nop
  }

  return status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af04      	add	r7, sp, #16
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008346:	79f9      	ldrb	r1, [r7, #7]
 8008348:	2300      	movs	r3, #0
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	2308      	movs	r3, #8
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	2300      	movs	r3, #0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	2200      	movs	r2, #0
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fb46 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af04      	add	r7, sp, #16
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	460b      	mov	r3, r1
 800837c:	80fb      	strh	r3, [r7, #6]
 800837e:	4613      	mov	r3, r2
 8008380:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008390:	7979      	ldrb	r1, [r7, #5]
 8008392:	7e3b      	ldrb	r3, [r7, #24]
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	2301      	movs	r3, #1
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	2200      	movs	r2, #0
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fb21 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af04      	add	r7, sp, #16
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	4611      	mov	r1, r2
 80083c2:	461a      	mov	r2, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	80fb      	strh	r3, [r7, #6]
 80083c8:	4613      	mov	r3, r2
 80083ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083cc:	7979      	ldrb	r1, [r7, #5]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2301      	movs	r3, #1
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	2201      	movs	r2, #1
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fb03 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083e8:	2300      	movs	r3, #0

}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b088      	sub	sp, #32
 80083f6:	af04      	add	r7, sp, #16
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	4613      	mov	r3, r2
 8008406:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008416:	7979      	ldrb	r1, [r7, #5]
 8008418:	7e3b      	ldrb	r3, [r7, #24]
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	2301      	movs	r3, #1
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	2302      	movs	r3, #2
 800842a:	2200      	movs	r2, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fade 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af04      	add	r7, sp, #16
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	80fb      	strh	r3, [r7, #6]
 800844e:	4613      	mov	r3, r2
 8008450:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008452:	7979      	ldrb	r1, [r7, #5]
 8008454:	2300      	movs	r3, #0
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	2301      	movs	r3, #1
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2302      	movs	r3, #2
 8008466:	2201      	movs	r2, #1
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fac0 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af04      	add	r7, sp, #16
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	4603      	mov	r3, r0
 8008488:	70fb      	strb	r3, [r7, #3]
 800848a:	460b      	mov	r3, r1
 800848c:	70bb      	strb	r3, [r7, #2]
 800848e:	4613      	mov	r3, r2
 8008490:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008492:	7878      	ldrb	r0, [r7, #1]
 8008494:	78ba      	ldrb	r2, [r7, #2]
 8008496:	78f9      	ldrb	r1, [r7, #3]
 8008498:	8b3b      	ldrh	r3, [r7, #24]
 800849a:	9302      	str	r3, [sp, #8]
 800849c:	7d3b      	ldrb	r3, [r7, #20]
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	7c3b      	ldrb	r3, [r7, #16]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa53 	bl	8008952 <USBH_LL_OpenPipe>

  return USBH_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa72 	bl	80089b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f836 	bl	8008554 <USBH_GetFreePipe>
 80084e8:	4603      	mov	r3, r0
 80084ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084ec:	89fb      	ldrh	r3, [r7, #14]
 80084ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00a      	beq.n	800850c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	33e0      	adds	r3, #224	; 0xe0
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	b2db      	uxtb	r3, r3
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d80d      	bhi.n	8008546 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	33e0      	adds	r3, #224	; 0xe0
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	33e0      	adds	r3, #224	; 0xe0
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
 8008564:	e00f      	b.n	8008586 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	33e0      	adds	r3, #224	; 0xe0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	b29b      	uxth	r3, r3
 800857e:	e007      	b.n	8008590 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d9ec      	bls.n	8008566 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800858c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085a0:	2201      	movs	r2, #1
 80085a2:	490e      	ldr	r1, [pc, #56]	; (80085dc <MX_USB_HOST_Init+0x40>)
 80085a4:	480e      	ldr	r0, [pc, #56]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085a6:	f7fe fba5 	bl	8006cf4 <USBH_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085b0:	f7f8 f9f6 	bl	80009a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085b4:	490b      	ldr	r1, [pc, #44]	; (80085e4 <MX_USB_HOST_Init+0x48>)
 80085b6:	480a      	ldr	r0, [pc, #40]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085b8:	f7fe fc2a 	bl	8006e10 <USBH_RegisterClass>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085c2:	f7f8 f9ed 	bl	80009a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085c6:	4806      	ldr	r0, [pc, #24]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085c8:	f7fe fcae 	bl	8006f28 <USBH_Start>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085d2:	f7f8 f9e5 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	080085fd 	.word	0x080085fd
 80085e0:	200001e8 	.word	0x200001e8
 80085e4:	2000000c 	.word	0x2000000c

080085e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <MX_USB_HOST_Process+0x10>)
 80085ee:	f7fe fcab 	bl	8006f48 <USBH_Process>
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200001e8 	.word	0x200001e8

080085fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	3b01      	subs	r3, #1
 800860c:	2b04      	cmp	r3, #4
 800860e:	d819      	bhi.n	8008644 <USBH_UserProcess+0x48>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <USBH_UserProcess+0x1c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008645 	.word	0x08008645
 800861c:	08008635 	.word	0x08008635
 8008620:	08008645 	.word	0x08008645
 8008624:	0800863d 	.word	0x0800863d
 8008628:	0800862d 	.word	0x0800862d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <USBH_UserProcess+0x58>)
 800862e:	2203      	movs	r2, #3
 8008630:	701a      	strb	r2, [r3, #0]
  break;
 8008632:	e008      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <USBH_UserProcess+0x58>)
 8008636:	2202      	movs	r2, #2
 8008638:	701a      	strb	r2, [r3, #0]
  break;
 800863a:	e004      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <USBH_UserProcess+0x58>)
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
  break;
 8008642:	e000      	b.n	8008646 <USBH_UserProcess+0x4a>

  default:
  break;
 8008644:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200005c0 	.word	0x200005c0

08008658 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	; 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008678:	d147      	bne.n	800870a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867a:	2300      	movs	r3, #0
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	4a24      	ldr	r2, [pc, #144]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6313      	str	r3, [r2, #48]	; 0x30
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800869a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	4619      	mov	r1, r3
 80086aa:	481b      	ldr	r0, [pc, #108]	; (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ac:	f7f8 fdf0 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b6:	2302      	movs	r3, #2
 80086b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086be:	2300      	movs	r3, #0
 80086c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086c2:	230a      	movs	r3, #10
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	4619      	mov	r1, r3
 80086cc:	4812      	ldr	r0, [pc, #72]	; (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ce:	f7f8 fddf 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	4a0f      	ldr	r2, [pc, #60]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086dc:	6353      	str	r3, [r2, #52]	; 0x34
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086ec:	6453      	str	r3, [r2, #68]	; 0x44
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	2043      	movs	r0, #67	; 0x43
 8008700:	f7f8 fcfd 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008704:	2043      	movs	r0, #67	; 0x43
 8008706:	f7f8 fd16 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800870a:	bf00      	nop
 800870c:	3728      	adds	r7, #40	; 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	40020000 	.word	0x40020000

0800871c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe ffeb 	bl	8007706 <USBH_LL_IncTimer>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff f823 	bl	8007792 <USBH_LL_Connect>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff f82c 	bl	80077c0 <USBH_LL_Disconnect>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
 800877c:	4613      	mov	r3, r2
 800877e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ffdd 	bl	800775a <USBH_LL_PortEnabled>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe ffdd 	bl	8007776 <USBH_LL_PortDisabled>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d12a      	bne.n	800882c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <USBH_LL_Init+0x74>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a15      	ldr	r2, [pc, #84]	; (8008838 <USBH_LL_Init+0x74>)
 80087e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <USBH_LL_Init+0x74>)
 80087e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087ee:	4b12      	ldr	r3, [pc, #72]	; (8008838 <USBH_LL_Init+0x74>)
 80087f0:	2208      	movs	r2, #8
 80087f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <USBH_LL_Init+0x74>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087fa:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <USBH_LL_Init+0x74>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008800:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <USBH_LL_Init+0x74>)
 8008802:	2202      	movs	r2, #2
 8008804:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <USBH_LL_Init+0x74>)
 8008808:	2200      	movs	r2, #0
 800880a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800880c:	480a      	ldr	r0, [pc, #40]	; (8008838 <USBH_LL_Init+0x74>)
 800880e:	f7f8 fef4 	bl	80015fa <HAL_HCD_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008818:	f7f8 f8c2 	bl	80009a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800881c:	4806      	ldr	r0, [pc, #24]	; (8008838 <USBH_LL_Init+0x74>)
 800881e:	f7f9 fad8 	bl	8001dd2 <HAL_HCD_GetCurrentFrame>
 8008822:	4603      	mov	r3, r0
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe ff5e 	bl	80076e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200005c4 	.word	0x200005c4

0800883c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008852:	4618      	mov	r0, r3
 8008854:	f7f9 fa47 	bl	8001ce6 <HAL_HCD_Start>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f95c 	bl	8008b1c <USBH_Get_USB_Status>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008868:	7bbb      	ldrb	r3, [r7, #14]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008888:	4618      	mov	r0, r3
 800888a:	f7f9 fa4f 	bl	8001d2c <HAL_HCD_Stop>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f941 	bl	8008b1c <USBH_Get_USB_Status>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889e:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fa97 	bl	8001dee <HAL_HCD_GetCurrentSpeed>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d00c      	beq.n	80088e0 <USBH_LL_GetSpeed+0x38>
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d80d      	bhi.n	80088e6 <USBH_LL_GetSpeed+0x3e>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <USBH_LL_GetSpeed+0x2c>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d003      	beq.n	80088da <USBH_LL_GetSpeed+0x32>
 80088d2:	e008      	b.n	80088e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	e008      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
    break;
 80088de:	e005      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088e0:	2302      	movs	r3, #2
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e002      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ea:	bf00      	nop
  }
  return  speed;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800890c:	4618      	mov	r0, r3
 800890e:	f7f9 fa2a 	bl	8001d66 <HAL_HCD_ResetPort>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f8ff 	bl	8008b1c <USBH_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008922:	7bbb      	ldrb	r3, [r7, #14]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7f9 fa31 	bl	8001daa <HAL_HCD_HC_GetXferCount>
 8008948:	4603      	mov	r3, r0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008952:	b590      	push	{r4, r7, lr}
 8008954:	b089      	sub	sp, #36	; 0x24
 8008956:	af04      	add	r7, sp, #16
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	4603      	mov	r3, r0
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	460b      	mov	r3, r1
 8008966:	70bb      	strb	r3, [r7, #2]
 8008968:	4613      	mov	r3, r2
 800896a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800897a:	787c      	ldrb	r4, [r7, #1]
 800897c:	78ba      	ldrb	r2, [r7, #2]
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4623      	mov	r3, r4
 8008992:	f7f8 fe94 	bl	80016be <HAL_HCD_HC_Init>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f8bd 	bl	8008b1c <USBH_Get_USB_Status>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}

080089b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f8 ff04 	bl	80017dc <HAL_HCD_HC_Halt>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f89e 	bl	8008b1c <USBH_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089ee:	b590      	push	{r4, r7, lr}
 80089f0:	b089      	sub	sp, #36	; 0x24
 80089f2:	af04      	add	r7, sp, #16
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	461a      	mov	r2, r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	70fb      	strb	r3, [r7, #3]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70bb      	strb	r3, [r7, #2]
 8008a04:	4613      	mov	r3, r2
 8008a06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a16:	787c      	ldrb	r4, [r7, #1]
 8008a18:	78ba      	ldrb	r2, [r7, #2]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4623      	mov	r3, r4
 8008a32:	f7f8 fef7 	bl	8001824 <HAL_HCD_HC_SubmitRequest>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f86d 	bl	8008b1c <USBH_Get_USB_Status>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f9 f98b 	bl	8001d82 <HAL_HCD_HC_GetURBState>
 8008a6c:	4603      	mov	r3, r0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d103      	bne.n	8008a94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f870 	bl	8008b74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a94:	20c8      	movs	r0, #200	; 0xc8
 8008a96:	f7f8 fa33 	bl	8000f00 <HAL_Delay>
  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	212c      	movs	r1, #44	; 0x2c
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	333b      	adds	r3, #59	; 0x3b
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	212c      	movs	r1, #44	; 0x2c
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	3354      	adds	r3, #84	; 0x54
 8008ade:	78ba      	ldrb	r2, [r7, #2]
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	e008      	b.n	8008af6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	212c      	movs	r1, #44	; 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	3355      	adds	r3, #85	; 0x55
 8008af2:	78ba      	ldrb	r2, [r7, #2]
 8008af4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7f8 f9f7 	bl	8000f00 <HAL_Delay>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBH_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBH_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b60:	2302      	movs	r3, #2
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e001      	b.n	8008b92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	461a      	mov	r2, r3
 8008b96:	2101      	movs	r1, #1
 8008b98:	4803      	ldr	r0, [pc, #12]	; (8008ba8 <MX_DriverVbusFS+0x34>)
 8008b9a:	f7f8 fd15 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40020800 	.word	0x40020800

08008bac <malloc>:
 8008bac:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <malloc+0xc>)
 8008bae:	4601      	mov	r1, r0
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f000 b82b 	b.w	8008c0c <_malloc_r>
 8008bb6:	bf00      	nop
 8008bb8:	20000078 	.word	0x20000078

08008bbc <free>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	; (8008bc8 <free+0xc>)
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f000 b8f3 	b.w	8008dac <_free_r>
 8008bc6:	bf00      	nop
 8008bc8:	20000078 	.word	0x20000078

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f000 f8ac 	bl	8008d34 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f8a7 	bl	8008d34 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f89c 	bl	8008d34 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	200008cc 	.word	0x200008cc

08008c0c <_malloc_r>:
 8008c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d08 <_malloc_r+0xfc>
 8008c38:	f000 f868 	bl	8008d0c <__malloc_lock>
 8008c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c40:	461c      	mov	r4, r3
 8008c42:	bb5c      	cbnz	r4, 8008c9c <_malloc_r+0x90>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff ffc0 	bl	8008bcc <sbrk_aligned>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	4604      	mov	r4, r0
 8008c50:	d155      	bne.n	8008cfe <_malloc_r+0xf2>
 8008c52:	f8d8 4000 	ldr.w	r4, [r8]
 8008c56:	4626      	mov	r6, r4
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	d145      	bne.n	8008ce8 <_malloc_r+0xdc>
 8008c5c:	2c00      	cmp	r4, #0
 8008c5e:	d048      	beq.n	8008cf2 <_malloc_r+0xe6>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	4631      	mov	r1, r6
 8008c64:	4638      	mov	r0, r7
 8008c66:	eb04 0903 	add.w	r9, r4, r3
 8008c6a:	f000 f863 	bl	8008d34 <_sbrk_r>
 8008c6e:	4581      	cmp	r9, r0
 8008c70:	d13f      	bne.n	8008cf2 <_malloc_r+0xe6>
 8008c72:	6821      	ldr	r1, [r4, #0]
 8008c74:	1a6d      	subs	r5, r5, r1
 8008c76:	4629      	mov	r1, r5
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff ffa7 	bl	8008bcc <sbrk_aligned>
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d037      	beq.n	8008cf2 <_malloc_r+0xe6>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	442b      	add	r3, r5
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d038      	beq.n	8008d02 <_malloc_r+0xf6>
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	42a2      	cmp	r2, r4
 8008c94:	d12b      	bne.n	8008cee <_malloc_r+0xe2>
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	e00f      	b.n	8008cbc <_malloc_r+0xb0>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	d41f      	bmi.n	8008ce2 <_malloc_r+0xd6>
 8008ca2:	2a0b      	cmp	r2, #11
 8008ca4:	d917      	bls.n	8008cd6 <_malloc_r+0xca>
 8008ca6:	1961      	adds	r1, r4, r5
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	bf18      	it	ne
 8008cae:	6059      	strne	r1, [r3, #4]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	bf08      	it	eq
 8008cb4:	f8c8 1000 	streq.w	r1, [r8]
 8008cb8:	5162      	str	r2, [r4, r5]
 8008cba:	604b      	str	r3, [r1, #4]
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f104 060b 	add.w	r6, r4, #11
 8008cc2:	f000 f829 	bl	8008d18 <__malloc_unlock>
 8008cc6:	f026 0607 	bic.w	r6, r6, #7
 8008cca:	1d23      	adds	r3, r4, #4
 8008ccc:	1af2      	subs	r2, r6, r3
 8008cce:	d0ae      	beq.n	8008c2e <_malloc_r+0x22>
 8008cd0:	1b9b      	subs	r3, r3, r6
 8008cd2:	50a3      	str	r3, [r4, r2]
 8008cd4:	e7ab      	b.n	8008c2e <_malloc_r+0x22>
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6862      	ldr	r2, [r4, #4]
 8008cda:	d1dd      	bne.n	8008c98 <_malloc_r+0x8c>
 8008cdc:	f8c8 2000 	str.w	r2, [r8]
 8008ce0:	e7ec      	b.n	8008cbc <_malloc_r+0xb0>
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	6864      	ldr	r4, [r4, #4]
 8008ce6:	e7ac      	b.n	8008c42 <_malloc_r+0x36>
 8008ce8:	4634      	mov	r4, r6
 8008cea:	6876      	ldr	r6, [r6, #4]
 8008cec:	e7b4      	b.n	8008c58 <_malloc_r+0x4c>
 8008cee:	4613      	mov	r3, r2
 8008cf0:	e7cc      	b.n	8008c8c <_malloc_r+0x80>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f000 f80e 	bl	8008d18 <__malloc_unlock>
 8008cfc:	e797      	b.n	8008c2e <_malloc_r+0x22>
 8008cfe:	6025      	str	r5, [r4, #0]
 8008d00:	e7dc      	b.n	8008cbc <_malloc_r+0xb0>
 8008d02:	605b      	str	r3, [r3, #4]
 8008d04:	deff      	udf	#255	; 0xff
 8008d06:	bf00      	nop
 8008d08:	200008c8 	.word	0x200008c8

08008d0c <__malloc_lock>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__malloc_lock+0x8>)
 8008d0e:	f000 b84b 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20000a0c 	.word	0x20000a0c

08008d18 <__malloc_unlock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__malloc_unlock+0x8>)
 8008d1a:	f000 b846 	b.w	8008daa <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20000a0c 	.word	0x20000a0c

08008d24 <memset>:
 8008d24:	4402      	add	r2, r0
 8008d26:	4603      	mov	r3, r0
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d100      	bne.n	8008d2e <memset+0xa>
 8008d2c:	4770      	bx	lr
 8008d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d32:	e7f9      	b.n	8008d28 <memset+0x4>

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d06      	ldr	r5, [pc, #24]	; (8008d50 <_sbrk_r+0x1c>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f7 fffa 	bl	8000d38 <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000a08 	.word	0x20000a08

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000078 	.word	0x20000078

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f000 f866 	bl	8008e44 <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	08008e80 	.word	0x08008e80
 8008d9c:	08008e80 	.word	0x08008e80
 8008da0:	08008e80 	.word	0x08008e80
 8008da4:	08008e84 	.word	0x08008e84

08008da8 <__retarget_lock_acquire_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_release_recursive>:
 8008daa:	4770      	bx	lr

08008dac <_free_r>:
 8008dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dae:	2900      	cmp	r1, #0
 8008db0:	d044      	beq.n	8008e3c <_free_r+0x90>
 8008db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db6:	9001      	str	r0, [sp, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f1a1 0404 	sub.w	r4, r1, #4
 8008dbe:	bfb8      	it	lt
 8008dc0:	18e4      	addlt	r4, r4, r3
 8008dc2:	f7ff ffa3 	bl	8008d0c <__malloc_lock>
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <_free_r+0x94>)
 8008dc8:	9801      	ldr	r0, [sp, #4]
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b933      	cbnz	r3, 8008ddc <_free_r+0x30>
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	b003      	add	sp, #12
 8008dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dd8:	f7ff bf9e 	b.w	8008d18 <__malloc_unlock>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d908      	bls.n	8008df2 <_free_r+0x46>
 8008de0:	6825      	ldr	r5, [r4, #0]
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	428b      	cmp	r3, r1
 8008de6:	bf01      	itttt	eq
 8008de8:	6819      	ldreq	r1, [r3, #0]
 8008dea:	685b      	ldreq	r3, [r3, #4]
 8008dec:	1949      	addeq	r1, r1, r5
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	e7ed      	b.n	8008dce <_free_r+0x22>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x50>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x46>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1855      	adds	r5, r2, r1
 8008e00:	42a5      	cmp	r5, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x70>
 8008e04:	6824      	ldr	r4, [r4, #0]
 8008e06:	4421      	add	r1, r4
 8008e08:	1854      	adds	r4, r2, r1
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1e0      	bne.n	8008dd2 <_free_r+0x26>
 8008e10:	681c      	ldr	r4, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	440c      	add	r4, r1
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	e7da      	b.n	8008dd2 <_free_r+0x26>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x78>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	e7d6      	b.n	8008dd2 <_free_r+0x26>
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf04      	itt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	bf04      	itt	eq
 8008e34:	1949      	addeq	r1, r1, r5
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	6054      	str	r4, [r2, #4]
 8008e3a:	e7ca      	b.n	8008dd2 <_free_r+0x26>
 8008e3c:	b003      	add	sp, #12
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	200008c8 	.word	0x200008c8

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
