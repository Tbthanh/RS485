
RS485_SEND_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003978  08003978  00004978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a74  08003a74  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00004a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00004a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003a7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001d8  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000083e4  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001715  00000000  00000000  0000d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  0000eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053d  00000000  00000000  0000f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203ba  00000000  00000000  0000f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090cf  00000000  00000000  0002fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c31e7  00000000  00000000  00038c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fbe15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002024  00000000  00000000  000fbe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  000fde7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003960 	.word	0x08003960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003960 	.word	0x08003960

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc2b 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f8c5 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f957 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f92b 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, MSG_SIZE);
 8000586:	2210      	movs	r2, #16
 8000588:	4950      	ldr	r1, [pc, #320]	@ (80006cc <main+0x15c>)
 800058a:	4851      	ldr	r0, [pc, #324]	@ (80006d0 <main+0x160>)
 800058c:	f001 fd83 	bl	8002096 <HAL_UARTEx_ReceiveToIdle_IT>
	  sendData (TxData);
	  HAL_Delay(1000);
#endif

#if (TEST == 6)
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "8GZ3F7X9Q1A5J2B");
 8000590:	4b50      	ldr	r3, [pc, #320]	@ (80006d4 <main+0x164>)
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2310      	movs	r3, #16
 8000596:	4a50      	ldr	r2, [pc, #320]	@ (80006d8 <main+0x168>)
 8000598:	2110      	movs	r1, #16
 800059a:	4850      	ldr	r0, [pc, #320]	@ (80006dc <main+0x16c>)
 800059c:	f002 fd2c 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 80005a0:	484e      	ldr	r0, [pc, #312]	@ (80006dc <main+0x16c>)
 80005a2:	f000 fac9 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005aa:	f000 fc83 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "D4H8K2N6T7P9W1R");
 80005ae:	4b4c      	ldr	r3, [pc, #304]	@ (80006e0 <main+0x170>)
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2310      	movs	r3, #16
 80005b4:	4a48      	ldr	r2, [pc, #288]	@ (80006d8 <main+0x168>)
 80005b6:	2110      	movs	r1, #16
 80005b8:	4848      	ldr	r0, [pc, #288]	@ (80006dc <main+0x16c>)
 80005ba:	f002 fd1d 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 80005be:	4847      	ldr	r0, [pc, #284]	@ (80006dc <main+0x16c>)
 80005c0:	f000 faba 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c8:	f000 fc74 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "X3C2L7V8N5A4J6Q");
 80005cc:	4b45      	ldr	r3, [pc, #276]	@ (80006e4 <main+0x174>)
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2310      	movs	r3, #16
 80005d2:	4a41      	ldr	r2, [pc, #260]	@ (80006d8 <main+0x168>)
 80005d4:	2110      	movs	r1, #16
 80005d6:	4841      	ldr	r0, [pc, #260]	@ (80006dc <main+0x16c>)
 80005d8:	f002 fd0e 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 80005dc:	483f      	ldr	r0, [pc, #252]	@ (80006dc <main+0x16c>)
 80005de:	f000 faab 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e6:	f000 fc65 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "P9Y5B2T8W4R7K1L");
 80005ea:	4b3f      	ldr	r3, [pc, #252]	@ (80006e8 <main+0x178>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2310      	movs	r3, #16
 80005f0:	4a39      	ldr	r2, [pc, #228]	@ (80006d8 <main+0x168>)
 80005f2:	2110      	movs	r1, #16
 80005f4:	4839      	ldr	r0, [pc, #228]	@ (80006dc <main+0x16c>)
 80005f6:	f002 fcff 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 80005fa:	4838      	ldr	r0, [pc, #224]	@ (80006dc <main+0x16c>)
 80005fc:	f000 fa9c 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000604:	f000 fc56 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "M1J4X7C8V2N5A3Q");
 8000608:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <main+0x17c>)
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2310      	movs	r3, #16
 800060e:	4a32      	ldr	r2, [pc, #200]	@ (80006d8 <main+0x168>)
 8000610:	2110      	movs	r1, #16
 8000612:	4832      	ldr	r0, [pc, #200]	@ (80006dc <main+0x16c>)
 8000614:	f002 fcf0 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 8000618:	4830      	ldr	r0, [pc, #192]	@ (80006dc <main+0x16c>)
 800061a:	f000 fa8d 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 800061e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000622:	f000 fc47 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "R6D8L2K4T5N9J3P");
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <main+0x180>)
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2310      	movs	r3, #16
 800062c:	4a2a      	ldr	r2, [pc, #168]	@ (80006d8 <main+0x168>)
 800062e:	2110      	movs	r1, #16
 8000630:	482a      	ldr	r0, [pc, #168]	@ (80006dc <main+0x16c>)
 8000632:	f002 fce1 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 8000636:	4829      	ldr	r0, [pc, #164]	@ (80006dc <main+0x16c>)
 8000638:	f000 fa7e 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000640:	f000 fc38 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "7X2F3G6H5P9Q1T4");
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <main+0x184>)
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2310      	movs	r3, #16
 800064a:	4a23      	ldr	r2, [pc, #140]	@ (80006d8 <main+0x168>)
 800064c:	2110      	movs	r1, #16
 800064e:	4823      	ldr	r0, [pc, #140]	@ (80006dc <main+0x16c>)
 8000650:	f002 fcd2 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 8000654:	4821      	ldr	r0, [pc, #132]	@ (80006dc <main+0x16c>)
 8000656:	f000 fa6f 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065e:	f000 fc29 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "L3P7N9J2K4W6T8D");
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <main+0x188>)
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2310      	movs	r3, #16
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <main+0x168>)
 800066a:	2110      	movs	r1, #16
 800066c:	481b      	ldr	r0, [pc, #108]	@ (80006dc <main+0x16c>)
 800066e:	f002 fcc3 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 8000672:	481a      	ldr	r0, [pc, #104]	@ (80006dc <main+0x16c>)
 8000674:	f000 fa60 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067c:	f000 fc1a 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "C5X8A2B4T7N6L3Q");
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <main+0x18c>)
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2310      	movs	r3, #16
 8000686:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <main+0x168>)
 8000688:	2110      	movs	r1, #16
 800068a:	4814      	ldr	r0, [pc, #80]	@ (80006dc <main+0x16c>)
 800068c:	f002 fcb4 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 8000690:	4812      	ldr	r0, [pc, #72]	@ (80006dc <main+0x16c>)
 8000692:	f000 fa51 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069a:	f000 fc0b 	bl	8000eb4 <HAL_Delay>
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "Q2N7J5T8K4W1R6P");
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <main+0x190>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2310      	movs	r3, #16
 80006a4:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <main+0x168>)
 80006a6:	2110      	movs	r1, #16
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <main+0x16c>)
 80006aa:	f002 fca5 	bl	8002ff8 <sniprintf>
	sendData (TxData);
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <main+0x16c>)
 80006b0:	f000 fa42 	bl	8000b38 <sendData>
	HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b8:	f000 fbfc 	bl	8000eb4 <HAL_Delay>

	  // while(1){}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  indx++;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <main+0x194>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <main+0x194>)
 80006c4:	6013      	str	r3, [r2, #0]
	snprintf(TxData, sizeof TxData,"%.*s", MSG_SIZE, "8GZ3F7X9Q1A5J2B");
 80006c6:	bf00      	nop
 80006c8:	e762      	b.n	8000590 <main+0x20>
 80006ca:	bf00      	nop
 80006cc:	200000d0 	.word	0x200000d0
 80006d0:	20000078 	.word	0x20000078
 80006d4:	08003980 	.word	0x08003980
 80006d8:	08003978 	.word	0x08003978
 80006dc:	200000c0 	.word	0x200000c0
 80006e0:	08003990 	.word	0x08003990
 80006e4:	080039a0 	.word	0x080039a0
 80006e8:	080039b0 	.word	0x080039b0
 80006ec:	080039c0 	.word	0x080039c0
 80006f0:	080039d0 	.word	0x080039d0
 80006f4:	080039e0 	.word	0x080039e0
 80006f8:	080039f0 	.word	0x080039f0
 80006fc:	08003a00 	.word	0x08003a00
 8000700:	08003a10 	.word	0x08003a10
 8000704:	200000e0 	.word	0x200000e0

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fca2 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800077c:	2348      	movs	r3, #72	@ 0x48
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000784:	2303      	movs	r3, #3
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f000 ff0f 	bl	80015b0 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f9f0 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f970 	bl	8001aa0 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f9d9 	bl	8000b7c <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 fb64 	bl	8001ee0 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f9ad 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000078 	.word	0x20000078
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4bab      	ldr	r3, [pc, #684]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4aaa      	ldr	r2, [pc, #680]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4ba8      	ldr	r3, [pc, #672]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4ba4      	ldr	r3, [pc, #656]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4aa3      	ldr	r2, [pc, #652]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4ba1      	ldr	r3, [pc, #644]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b9d      	ldr	r3, [pc, #628]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a9c      	ldr	r2, [pc, #624]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b9a      	ldr	r3, [pc, #616]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b96      	ldr	r3, [pc, #600]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a95      	ldr	r2, [pc, #596]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b93      	ldr	r3, [pc, #588]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b8f      	ldr	r3, [pc, #572]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a8e      	ldr	r2, [pc, #568]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b8c      	ldr	r3, [pc, #560]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b88      	ldr	r3, [pc, #544]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a87      	ldr	r2, [pc, #540]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b85      	ldr	r3, [pc, #532]	@ (8000af8 <MX_GPIO_Init+0x2c8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4882      	ldr	r0, [pc, #520]	@ (8000afc <MX_GPIO_Init+0x2cc>)
 80008f4:	f000 fe42 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4880      	ldr	r0, [pc, #512]	@ (8000b00 <MX_GPIO_Init+0x2d0>)
 80008fe:	f000 fe3d 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2102      	movs	r1, #2
 8000906:	487f      	ldr	r0, [pc, #508]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 8000908:	f000 fe38 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090c:	2200      	movs	r2, #0
 800090e:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000912:	487d      	ldr	r0, [pc, #500]	@ (8000b08 <MX_GPIO_Init+0x2d8>)
 8000914:	f000 fe32 	bl	800157c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000918:	2308      	movs	r3, #8
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4873      	ldr	r0, [pc, #460]	@ (8000afc <MX_GPIO_Init+0x2cc>)
 8000930:	f000 fc88 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000934:	2301      	movs	r3, #1
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	486d      	ldr	r0, [pc, #436]	@ (8000b00 <MX_GPIO_Init+0x2d0>)
 800094c:	f000 fc7a 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000950:	2308      	movs	r3, #8
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000960:	2305      	movs	r3, #5
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4865      	ldr	r0, [pc, #404]	@ (8000b00 <MX_GPIO_Init+0x2d0>)
 800096c:	f000 fc6a 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000974:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	485f      	ldr	r0, [pc, #380]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 8000986:	f000 fc5d 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 800098a:	2302      	movs	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4858      	ldr	r0, [pc, #352]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 80009a2:	f000 fc4f 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b6:	2306      	movs	r3, #6
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4850      	ldr	r0, [pc, #320]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 80009c2:	f000 fc3f 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009c6:	23e0      	movs	r3, #224	@ 0xe0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4848      	ldr	r0, [pc, #288]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 80009e2:	f000 fc2f 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009e6:	2304      	movs	r3, #4
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4844      	ldr	r0, [pc, #272]	@ (8000b0c <MX_GPIO_Init+0x2dc>)
 80009fa:	f000 fc23 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a10:	2305      	movs	r3, #5
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	483c      	ldr	r0, [pc, #240]	@ (8000b0c <MX_GPIO_Init+0x2dc>)
 8000a1c:	f000 fc12 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a20:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a24:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4833      	ldr	r0, [pc, #204]	@ (8000b08 <MX_GPIO_Init+0x2d8>)
 8000a3a:	f000 fc03 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a3e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a50:	2306      	movs	r3, #6
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4829      	ldr	r0, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0x2d0>)
 8000a5c:	f000 fbf2 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4823      	ldr	r0, [pc, #140]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 8000a76:	f000 fbe5 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a7a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <MX_GPIO_Init+0x2d4>)
 8000a98:	f000 fbd4 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4816      	ldr	r0, [pc, #88]	@ (8000b08 <MX_GPIO_Init+0x2d8>)
 8000ab0:	f000 fbc8 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ab4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <MX_GPIO_Init+0x2dc>)
 8000ad2:	f000 fbb7 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ada:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_GPIO_Init+0x2cc>)
 8000aec:	f000 fbaa 	bl	8001244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_UARTEx_RxEventCallback>:
  * @brief UARTEx Event Callback
  * @param None
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, MSG_SIZE);
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	4904      	ldr	r1, [pc, #16]	@ (8000b30 <HAL_UARTEx_RxEventCallback+0x20>)
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <HAL_UARTEx_RxEventCallback+0x24>)
 8000b22:	f001 fab8 	bl	8002096 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d0 	.word	0x200000d0
 8000b34:	20000078 	.word	0x20000078

08000b38 <sendData>:
  * @brief Function to sent data through uart
  * @param None
  * @retval None
  */
void sendData (uint8_t *data)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <sendData+0x3c>)
 8000b46:	f000 fd19 	bl	800157c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, strlen (data) , 1000);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fb40 	bl	80001d0 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <sendData+0x40>)
 8000b5c:	f001 fa10 	bl	8001f80 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <sendData+0x3c>)
 8000b66:	f000 fd09 	bl	800157c <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40020000 	.word	0x40020000
 8000b78:	20000078 	.word	0x20000078

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa68 	bl	800109c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <HAL_UART_MspInit+0x94>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d133      	bne.n	8000c62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <HAL_UART_MspInit+0x9c>)
 8000c4e:	f000 faf9 	bl	8001244 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2026      	movs	r0, #38	@ 0x26
 8000c58:	f000 fa2b 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c5c:	2026      	movs	r0, #38	@ 0x26
 8000c5e:	f000 fa44 	bl	80010ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f000 f8d1 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <USART2_IRQHandler+0x10>)
 8000cde:	f001 fa37 	bl	8002150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000078 	.word	0x20000078

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f002 f9a8 	bl	8003070 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20020000 	.word	0x20020000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	200000e4 	.word	0x200000e4
 8000d54:	20000238 	.word	0x20000238

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	@ (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	@ (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f002 f967 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fbdf 	bl	8000570 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dc0:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8000dc4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc8:	20000234 	.word	0x20000234

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f94f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fec0 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f967 	bl	8001106 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f92f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200000e8 	.word	0x200000e8

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000e8 	.word	0x200000e8

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff feb6 	bl	8000e9c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d008      	beq.n	8001150 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e052      	b.n	80011f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0216 	bic.w	r2, r2, #22
 800115e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800116e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <HAL_DMA_Abort+0x62>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a0:	e013      	b.n	80011ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a2:	f7ff fe7b 	bl	8000e9c <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d90c      	bls.n	80011ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e015      	b.n	80011f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e4      	bne.n	80011a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011dc:	223f      	movs	r2, #63	@ 0x3f
 80011de:	409a      	lsls	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d004      	beq.n	800121c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e00c      	b.n	8001236 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2205      	movs	r2, #5
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e16b      	b.n	8001538 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 815a 	bne.w	8001532 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d005      	beq.n	8001296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	2b02      	cmp	r3, #2
 8001294:	d130      	bne.n	80012f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b03      	cmp	r3, #3
 8001302:	d017      	beq.n	8001334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d123      	bne.n	8001388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80b4 	beq.w	8001532 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <HAL_GPIO_Init+0x30c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001550 <HAL_GPIO_Init+0x30c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b5d      	ldr	r3, [pc, #372]	@ (8001550 <HAL_GPIO_Init+0x30c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001554 <HAL_GPIO_Init+0x310>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a52      	ldr	r2, [pc, #328]	@ (8001558 <HAL_GPIO_Init+0x314>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x226>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a51      	ldr	r2, [pc, #324]	@ (800155c <HAL_GPIO_Init+0x318>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x222>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a50      	ldr	r2, [pc, #320]	@ (8001560 <HAL_GPIO_Init+0x31c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x21e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <HAL_GPIO_Init+0x320>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x21a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4e      	ldr	r2, [pc, #312]	@ (8001568 <HAL_GPIO_Init+0x324>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x216>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4d      	ldr	r2, [pc, #308]	@ (800156c <HAL_GPIO_Init+0x328>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x212>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_GPIO_Init+0x32c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x20e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_GPIO_Init+0x330>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x20a>
 800144a:	2307      	movs	r3, #7
 800144c:	e00e      	b.n	800146c <HAL_GPIO_Init+0x228>
 800144e:	2308      	movs	r3, #8
 8001450:	e00c      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001452:	2306      	movs	r3, #6
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001456:	2305      	movs	r3, #5
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x228>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x228>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x228>
 800146a:	2300      	movs	r3, #0
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4935      	ldr	r1, [pc, #212]	@ (8001554 <HAL_GPIO_Init+0x310>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <HAL_GPIO_Init+0x334>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a32      	ldr	r2, [pc, #200]	@ (8001578 <HAL_GPIO_Init+0x334>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <HAL_GPIO_Init+0x334>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a27      	ldr	r2, [pc, #156]	@ (8001578 <HAL_GPIO_Init+0x334>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_GPIO_Init+0x334>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001502:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_GPIO_Init+0x334>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_GPIO_Init+0x334>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152c:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <HAL_GPIO_Init+0x334>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f67f ae90 	bls.w	8001260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40021400 	.word	0x40021400
 8001570:	40021800 	.word	0x40021800
 8001574:	40021c00 	.word	0x40021c00
 8001578:	40013c00 	.word	0x40013c00

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001598:	e003      	b.n	80015a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fc18 	bl	8000e9c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fc14 	bl	8000e9c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc04 	bl	8000e9c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc00 	bl	8000e9c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fbb9 	bl	8000e9c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fbb5 	bl	8000e9c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb98 	bl	8000e9c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fb94 	bl	8000e9c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fb78 	bl	8000e9c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb74 	bl	8000e9c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb61 	bl	8000e9c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fb5d 	bl	8000e9c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb1d 	bl	8000e9c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fb19 	bl	8000e9c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	@ 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fade 	bl	8000e9c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fada 	bl	8000e9c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fac8 	bl	8000e9c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fac4 	bl	8000e9c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fa98 	bl	8000e9c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa94 	bl	8000e9c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fa6d 	bl	8000e9c <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fa69 	bl	8000e9c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa56 	bl	8000e9c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa52 	bl	8000e9c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f984 	bl	8000e9c <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f980 	bl	8000e9c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f8e4 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08003a20 	.word	0x08003a20
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b094      	sub	sp, #80	@ 0x50
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80e1 	bhi.w	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e0db      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ca4:	e0db      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001caa:	e0d8      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cde:	4622      	mov	r2, r4
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	0159      	lsls	r1, r3, #5
 8001cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf0:	0150      	lsls	r0, r2, #5
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	1a51      	subs	r1, r2, r1
 8001cfa:	6139      	str	r1, [r7, #16]
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d10:	4659      	mov	r1, fp
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	4651      	mov	r1, sl
 8001d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	018a      	lsls	r2, r1, #6
 8001d1e:	4651      	mov	r1, sl
 8001d20:	ebb2 0801 	subs.w	r8, r2, r1
 8001d24:	4659      	mov	r1, fp
 8001d26:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3e:	4690      	mov	r8, r2
 8001d40:	4699      	mov	r9, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	eb18 0303 	adds.w	r3, r8, r3
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	eb49 0303 	adc.w	r3, r9, r3
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	024b      	lsls	r3, r1, #9
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d68:	4621      	mov	r1, r4
 8001d6a:	024a      	lsls	r2, r1, #9
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d72:	2200      	movs	r2, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d7c:	f7fe fa80 	bl	8000280 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d88:	e058      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	2200      	movs	r2, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	4611      	mov	r1, r2
 8001d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da4:	4642      	mov	r2, r8
 8001da6:	464b      	mov	r3, r9
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	0159      	lsls	r1, r3, #5
 8001db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db6:	0150      	lsls	r0, r2, #5
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8001de0:	eb63 050b 	sbc.w	r5, r3, fp
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	00eb      	lsls	r3, r5, #3
 8001dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df2:	00e2      	lsls	r2, r4, #3
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	18e3      	adds	r3, r4, r3
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	464b      	mov	r3, r9
 8001e00:	eb45 0303 	adc.w	r3, r5, r3
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e12:	4629      	mov	r1, r5
 8001e14:	028b      	lsls	r3, r1, #10
 8001e16:	4621      	mov	r1, r4
 8001e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	028a      	lsls	r2, r1, #10
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e26:	2200      	movs	r2, #0
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	61fa      	str	r2, [r7, #28]
 8001e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e30:	f7fe fa26 	bl	8000280 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3750      	adds	r7, #80	@ 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	007a1200 	.word	0x007a1200

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a9b      	lsrs	r3, r3, #10
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	@ (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08003a30 	.word	0x08003a30

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	f7ff ffdc 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0b5b      	lsrs	r3, r3, #13
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08003a30 	.word	0x08003a30

08001ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fe66 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fdf3 	bl	8002b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d175      	bne.n	800208c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_UART_Transmit+0x2c>
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e06e      	b.n	800208e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2221      	movs	r2, #33	@ 0x21
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fbe:	f7fe ff6d 	bl	8000e9c <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fd8:	d108      	bne.n	8001fec <HAL_UART_Transmit+0x6c>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	e003      	b.n	8001ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ff4:	e02e      	b.n	8002054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2180      	movs	r1, #128	@ 0x80
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb55 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03a      	b.n	800208e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800202c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	3302      	adds	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	e007      	b.n	8002046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1cb      	bne.n	8001ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2200      	movs	r2, #0
 8002066:	2140      	movs	r1, #64	@ 0x40
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fb21 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e006      	b.n	800208e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b08c      	sub	sp, #48	@ 0x30
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d14a      	bne.n	8002146 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e043      	b.n	8002148 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fb45 	bl	8002762 <UART_Start_Receive_IT>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d12c      	bne.n	8002140 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d125      	bne.n	800213a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	e853 3f00 	ldrex	r3, [r3]
 8002112:	617b      	str	r3, [r7, #20]
   return(result);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330c      	adds	r3, #12
 8002122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002124:	627a      	str	r2, [r7, #36]	@ 0x24
 8002126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	e841 2300 	strex	r3, r2, [r1]
 8002130:	61fb      	str	r3, [r7, #28]
   return(result);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002138:	e002      	b.n	8002140 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002140:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002144:	e000      	b.n	8002148 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3730      	adds	r7, #48	@ 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0ba      	sub	sp, #232	@ 0xe8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800218e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_UART_IRQHandler+0x66>
 80021a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fbf0 	bl	8002994 <UART_Receive_IT>
      return;
 80021b4:	e25b      	b.n	800266e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80de 	beq.w	800237c <HAL_UART_IRQHandler+0x22c>
 80021c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80d1 	beq.w	800237c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_UART_IRQHandler+0xae>
 80021e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_UART_IRQHandler+0xd2>
 800220a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0202 	orr.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_UART_IRQHandler+0xf6>
 800222e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d011      	beq.n	8002276 <HAL_UART_IRQHandler+0x126>
 8002252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800225e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f043 0208 	orr.w	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81f2 	beq.w	8002664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_UART_IRQHandler+0x14e>
 800228c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fb7b 	bl	8002994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a8:	2b40      	cmp	r3, #64	@ 0x40
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_UART_IRQHandler+0x17a>
 80022c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d04f      	beq.n	800236a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa83 	bl	80027d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d141      	bne.n	8002362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ec:	e853 3f00 	ldrex	r3, [r3]
 80022f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3314      	adds	r3, #20
 8002306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800230a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800230e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1d9      	bne.n	80022de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d013      	beq.n	800235a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	4a7e      	ldr	r2, [pc, #504]	@ (8002530 <HAL_UART_IRQHandler+0x3e0>)
 8002338:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ff5d 	bl	80011fe <HAL_DMA_Abort_IT>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002354:	4610      	mov	r0, r2
 8002356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e00e      	b.n	8002378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f99e 	bl	800269c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002360:	e00a      	b.n	8002378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f99a 	bl	800269c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002368:	e006      	b.n	8002378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f996 	bl	800269c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002376:	e175      	b.n	8002664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	bf00      	nop
    return;
 800237a:	e173      	b.n	8002664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	2b01      	cmp	r3, #1
 8002382:	f040 814f 	bne.w	8002624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8148 	beq.w	8002624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8141 	beq.w	8002624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b40      	cmp	r3, #64	@ 0x40
 80023c4:	f040 80b6 	bne.w	8002534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8145 	beq.w	8002668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023e6:	429a      	cmp	r2, r3
 80023e8:	f080 813e 	bcs.w	8002668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023fe:	f000 8088 	beq.w	8002512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800241c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800242e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800243a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1d9      	bne.n	8002402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800245e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3314      	adds	r3, #20
 800246e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002472:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800247a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800247e:	e841 2300 	strex	r3, r2, [r1]
 8002482:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e1      	bne.n	800244e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3314      	adds	r3, #20
 8002490:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002494:	e853 3f00 	ldrex	r3, [r3]
 8002498:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800249a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800249c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3314      	adds	r3, #20
 80024aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80024bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e3      	bne.n	800248a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024da:	e853 3f00 	ldrex	r3, [r3]
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e2:	f023 0310 	bic.w	r3, r3, #16
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e3      	bne.n	80024d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fe06 	bl	800111e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002520:	b29b      	uxth	r3, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe faf1 	bl	8000b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800252e:	e09b      	b.n	8002668 <HAL_UART_IRQHandler+0x518>
 8002530:	0800289d 	.word	0x0800289d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800253c:	b29b      	uxth	r3, r3
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 808e 	beq.w	800266c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8089 	beq.w	800266c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800257e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002586:	e841 2300 	strex	r3, r2, [r1]
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800258c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e3      	bne.n	800255a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	e853 3f00 	ldrex	r3, [r3]
 80025a0:	623b      	str	r3, [r7, #32]
   return(result);
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025be:	e841 2300 	strex	r3, r2, [r1]
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e3      	bne.n	8002592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0310 	bic.w	r3, r3, #16
 80025ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025fc:	61fa      	str	r2, [r7, #28]
 80025fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	617b      	str	r3, [r7, #20]
   return(result);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e3      	bne.n	80025d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe fa77 	bl	8000b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002622:	e023      	b.n	800266c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_UART_IRQHandler+0x4f4>
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f941 	bl	80028c4 <UART_Transmit_IT>
    return;
 8002642:	e014      	b.n	800266e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <HAL_UART_IRQHandler+0x51e>
 8002650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f981 	bl	8002964 <UART_EndTransmit_IT>
    return;
 8002662:	e004      	b.n	800266e <HAL_UART_IRQHandler+0x51e>
    return;
 8002664:	bf00      	nop
 8002666:	e002      	b.n	800266e <HAL_UART_IRQHandler+0x51e>
      return;
 8002668:	bf00      	nop
 800266a:	e000      	b.n	800266e <HAL_UART_IRQHandler+0x51e>
      return;
 800266c:	bf00      	nop
  }
}
 800266e:	37e8      	adds	r7, #232	@ 0xe8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c0:	e03b      	b.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d037      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7fe fbe7 	bl	8000e9c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e03a      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d023      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b80      	cmp	r3, #128	@ 0x80
 80026f6:	d020      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b40      	cmp	r3, #64	@ 0x40
 80026fc:	d01d      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d116      	bne.n	800273a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f857 	bl	80027d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2208      	movs	r2, #8
 800272c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	429a      	cmp	r2, r3
 8002756:	d0b4      	beq.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	4613      	mov	r3, r2
 800276e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2222      	movs	r2, #34	@ 0x22
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b095      	sub	sp, #84	@ 0x54
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8002800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002804:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	61fb      	str	r3, [r7, #28]
   return(result);
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e5      	bne.n	8002812 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	2b01      	cmp	r3, #1
 800284c:	d119      	bne.n	8002882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	60bb      	str	r3, [r7, #8]
   return(result);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286e:	61ba      	str	r2, [r7, #24]
 8002870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6979      	ldr	r1, [r7, #20]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	613b      	str	r3, [r7, #16]
   return(result);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002890:	bf00      	nop
 8002892:	3754      	adds	r7, #84	@ 0x54
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff fef0 	bl	800269c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b21      	cmp	r3, #33	@ 0x21
 80028d6:	d13e      	bne.n	8002956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e0:	d114      	bne.n	800290c <UART_Transmit_IT+0x48>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d110      	bne.n	800290c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	1c9a      	adds	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	e008      	b.n	800291e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	1c59      	adds	r1, r3, #1
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6211      	str	r1, [r2, #32]
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800297a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fe75 	bl	8002674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b22      	cmp	r3, #34	@ 0x22
 80029a6:	f040 80ae 	bne.w	8002b06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b2:	d117      	bne.n	80029e4 <UART_Receive_IT+0x50>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80029e2:	e026      	b.n	8002a32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	d007      	beq.n	8002a08 <UART_Receive_IT+0x74>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <UART_Receive_IT+0x82>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e008      	b.n	8002a28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d15d      	bne.n	8002b02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0220 	bic.w	r2, r2, #32
 8002a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d135      	bne.n	8002af8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	623a      	str	r2, [r7, #32]
 8002ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e5      	bne.n	8002a92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10a      	bne.n	8002aea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe f80d 	bl	8000b10 <HAL_UARTEx_RxEventCallback>
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fdc5 	bl	8002688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e002      	b.n	8002b08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3730      	adds	r7, #48	@ 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b0c0      	sub	sp, #256	@ 0x100
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	ea40 0301 	orr.w	r3, r0, r1
 8002b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b68:	f021 010c 	bic.w	r1, r1, #12
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b76:	430b      	orrs	r3, r1
 8002b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	ea40 0301 	orr.w	r3, r0, r1
 8002b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8002ddc <UART_SetConfig+0x2cc>)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0xa0>
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b8d      	ldr	r3, [pc, #564]	@ (8002de0 <UART_SetConfig+0x2d0>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d104      	bne.n	8002bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7ff f982 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bb8:	e003      	b.n	8002bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff f969 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bcc:	f040 810c 	bne.w	8002de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bea:	415b      	adcs	r3, r3
 8002bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	eb12 0801 	adds.w	r8, r2, r1
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb43 0901 	adc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c20:	462b      	mov	r3, r5
 8002c22:	eb49 0303 	adc.w	r3, r9, r3
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c3e:	460b      	mov	r3, r1
 8002c40:	18db      	adds	r3, r3, r3
 8002c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c44:	4613      	mov	r3, r2
 8002c46:	eb42 0303 	adc.w	r3, r2, r3
 8002c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c54:	f7fd fb14 	bl	8000280 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	011c      	lsls	r4, r3, #4
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c80:	415b      	adcs	r3, r3
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c88:	4641      	mov	r1, r8
 8002c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c8e:	4649      	mov	r1, r9
 8002c90:	eb43 0b01 	adc.w	fp, r3, r1
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca8:	4692      	mov	sl, r2
 8002caa:	469b      	mov	fp, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	eb1a 0303 	adds.w	r3, sl, r3
 8002cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cea:	f7fd fac9 	bl	8000280 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d18:	441c      	add	r4, r3
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d34:	415b      	adcs	r3, r3
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	1851      	adds	r1, r2, r1
 8002d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d42:	4649      	mov	r1, r9
 8002d44:	414b      	adcs	r3, r1
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d54:	4659      	mov	r1, fp
 8002d56:	00cb      	lsls	r3, r1, #3
 8002d58:	4651      	mov	r1, sl
 8002d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5e:	4651      	mov	r1, sl
 8002d60:	00ca      	lsls	r2, r1, #3
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	4642      	mov	r2, r8
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d70:	464b      	mov	r3, r9
 8002d72:	460a      	mov	r2, r1
 8002d74:	eb42 0303 	adc.w	r3, r2, r3
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002da6:	f7fd fa6b 	bl	8000280 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2164      	movs	r1, #100	@ 0x64
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3332      	adds	r3, #50	@ 0x32
 8002dc2:	4a08      	ldr	r2, [pc, #32]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4422      	add	r2, r4
 8002dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd8:	e106      	b.n	8002fe8 <UART_SetConfig+0x4d8>
 8002dda:	bf00      	nop
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002df2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	6239      	str	r1, [r7, #32]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	1854      	adds	r4, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0501 	adc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e30:	464b      	mov	r3, r9
 8002e32:	eb45 0303 	adc.w	r3, r5, r3
 8002e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e56:	4629      	mov	r1, r5
 8002e58:	008b      	lsls	r3, r1, #2
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e60:	4621      	mov	r1, r4
 8002e62:	008a      	lsls	r2, r1, #2
 8002e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e68:	f7fd fa0a 	bl	8000280 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011c      	lsls	r4, r3, #4
 8002e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	61b9      	str	r1, [r7, #24]
 8002e94:	415b      	adcs	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	1851      	adds	r1, r2, r1
 8002ea0:	6139      	str	r1, [r7, #16]
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	00cb      	lsls	r3, r1, #3
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	00ca      	lsls	r2, r1, #3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	008b      	lsls	r3, r1, #2
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efe:	4641      	mov	r1, r8
 8002f00:	008a      	lsls	r2, r1, #2
 8002f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f06:	f7fd f9bb 	bl	8000280 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002f12:	fba3 2301 	umull	r2, r3, r3, r1
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2264      	movs	r2, #100	@ 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	1acb      	subs	r3, r1, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	@ 0x32
 8002f24:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f30:	441c      	add	r4, r3
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f82:	464b      	mov	r3, r9
 8002f84:	460a      	mov	r2, r1
 8002f86:	eb42 0303 	adc.w	r3, r2, r3
 8002f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f96:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	008b      	lsls	r3, r1, #2
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fae:	4641      	mov	r1, r8
 8002fb0:	008a      	lsls	r2, r1, #2
 8002fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fb6:	f7fd f963 	bl	8000280 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	@ 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	3332      	adds	r3, #50	@ 0x32
 8002fd2:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4422      	add	r2, r4
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <sniprintf>:
 8002ff8:	b40c      	push	{r2, r3}
 8002ffa:	b530      	push	{r4, r5, lr}
 8002ffc:	4b17      	ldr	r3, [pc, #92]	@ (800305c <sniprintf+0x64>)
 8002ffe:	1e0c      	subs	r4, r1, #0
 8003000:	681d      	ldr	r5, [r3, #0]
 8003002:	b09d      	sub	sp, #116	@ 0x74
 8003004:	da08      	bge.n	8003018 <sniprintf+0x20>
 8003006:	238b      	movs	r3, #139	@ 0x8b
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	f04f 30ff 	mov.w	r0, #4294967295
 800300e:	b01d      	add	sp, #116	@ 0x74
 8003010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003014:	b002      	add	sp, #8
 8003016:	4770      	bx	lr
 8003018:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800301c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003020:	bf14      	ite	ne
 8003022:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003026:	4623      	moveq	r3, r4
 8003028:	9304      	str	r3, [sp, #16]
 800302a:	9307      	str	r3, [sp, #28]
 800302c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003030:	9002      	str	r0, [sp, #8]
 8003032:	9006      	str	r0, [sp, #24]
 8003034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800303a:	ab21      	add	r3, sp, #132	@ 0x84
 800303c:	a902      	add	r1, sp, #8
 800303e:	4628      	mov	r0, r5
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	f000 f995 	bl	8003370 <_svfiprintf_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	bfbc      	itt	lt
 800304a:	238b      	movlt	r3, #139	@ 0x8b
 800304c:	602b      	strlt	r3, [r5, #0]
 800304e:	2c00      	cmp	r4, #0
 8003050:	d0dd      	beq.n	800300e <sniprintf+0x16>
 8003052:	9b02      	ldr	r3, [sp, #8]
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e7d9      	b.n	800300e <sniprintf+0x16>
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <memset>:
 8003060:	4402      	add	r2, r0
 8003062:	4603      	mov	r3, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	f803 1b01 	strb.w	r1, [r3], #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	@ (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000000c 	.word	0x2000000c

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4d0d      	ldr	r5, [pc, #52]	@ (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	@ (80030b8 <__libc_init_array+0x3c>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2600      	movs	r6, #0
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4d0b      	ldr	r5, [pc, #44]	@ (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	@ (80030c0 <__libc_init_array+0x44>)
 8003090:	f000 fc66 	bl	8003960 <_init>
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2600      	movs	r6, #0
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	08003a74 	.word	0x08003a74
 80030b8:	08003a74 	.word	0x08003a74
 80030bc:	08003a74 	.word	0x08003a74
 80030c0:	08003a78 	.word	0x08003a78

080030c4 <__retarget_lock_acquire_recursive>:
 80030c4:	4770      	bx	lr

080030c6 <__retarget_lock_release_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <_free_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4605      	mov	r5, r0
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d041      	beq.n	8003154 <_free_r+0x8c>
 80030d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d4:	1f0c      	subs	r4, r1, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfb8      	it	lt
 80030da:	18e4      	addlt	r4, r4, r3
 80030dc:	f000 f8e0 	bl	80032a0 <__malloc_lock>
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <_free_r+0x90>)
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	b933      	cbnz	r3, 80030f4 <_free_r+0x2c>
 80030e6:	6063      	str	r3, [r4, #4]
 80030e8:	6014      	str	r4, [r2, #0]
 80030ea:	4628      	mov	r0, r5
 80030ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f0:	f000 b8dc 	b.w	80032ac <__malloc_unlock>
 80030f4:	42a3      	cmp	r3, r4
 80030f6:	d908      	bls.n	800310a <_free_r+0x42>
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	1821      	adds	r1, r4, r0
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf01      	itttt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	1809      	addeq	r1, r1, r0
 8003106:	6021      	streq	r1, [r4, #0]
 8003108:	e7ed      	b.n	80030e6 <_free_r+0x1e>
 800310a:	461a      	mov	r2, r3
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b10b      	cbz	r3, 8003114 <_free_r+0x4c>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d9fa      	bls.n	800310a <_free_r+0x42>
 8003114:	6811      	ldr	r1, [r2, #0]
 8003116:	1850      	adds	r0, r2, r1
 8003118:	42a0      	cmp	r0, r4
 800311a:	d10b      	bne.n	8003134 <_free_r+0x6c>
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	4401      	add	r1, r0
 8003120:	1850      	adds	r0, r2, r1
 8003122:	4283      	cmp	r3, r0
 8003124:	6011      	str	r1, [r2, #0]
 8003126:	d1e0      	bne.n	80030ea <_free_r+0x22>
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	6053      	str	r3, [r2, #4]
 800312e:	4408      	add	r0, r1
 8003130:	6010      	str	r0, [r2, #0]
 8003132:	e7da      	b.n	80030ea <_free_r+0x22>
 8003134:	d902      	bls.n	800313c <_free_r+0x74>
 8003136:	230c      	movs	r3, #12
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	e7d6      	b.n	80030ea <_free_r+0x22>
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	1821      	adds	r1, r4, r0
 8003140:	428b      	cmp	r3, r1
 8003142:	bf04      	itt	eq
 8003144:	6819      	ldreq	r1, [r3, #0]
 8003146:	685b      	ldreq	r3, [r3, #4]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	bf04      	itt	eq
 800314c:	1809      	addeq	r1, r1, r0
 800314e:	6021      	streq	r1, [r4, #0]
 8003150:	6054      	str	r4, [r2, #4]
 8003152:	e7ca      	b.n	80030ea <_free_r+0x22>
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	20000230 	.word	0x20000230

0800315c <sbrk_aligned>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	4e0f      	ldr	r6, [pc, #60]	@ (800319c <sbrk_aligned+0x40>)
 8003160:	460c      	mov	r4, r1
 8003162:	6831      	ldr	r1, [r6, #0]
 8003164:	4605      	mov	r5, r0
 8003166:	b911      	cbnz	r1, 800316e <sbrk_aligned+0x12>
 8003168:	f000 fba6 	bl	80038b8 <_sbrk_r>
 800316c:	6030      	str	r0, [r6, #0]
 800316e:	4621      	mov	r1, r4
 8003170:	4628      	mov	r0, r5
 8003172:	f000 fba1 	bl	80038b8 <_sbrk_r>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	d103      	bne.n	8003182 <sbrk_aligned+0x26>
 800317a:	f04f 34ff 	mov.w	r4, #4294967295
 800317e:	4620      	mov	r0, r4
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	1cc4      	adds	r4, r0, #3
 8003184:	f024 0403 	bic.w	r4, r4, #3
 8003188:	42a0      	cmp	r0, r4
 800318a:	d0f8      	beq.n	800317e <sbrk_aligned+0x22>
 800318c:	1a21      	subs	r1, r4, r0
 800318e:	4628      	mov	r0, r5
 8003190:	f000 fb92 	bl	80038b8 <_sbrk_r>
 8003194:	3001      	adds	r0, #1
 8003196:	d1f2      	bne.n	800317e <sbrk_aligned+0x22>
 8003198:	e7ef      	b.n	800317a <sbrk_aligned+0x1e>
 800319a:	bf00      	nop
 800319c:	2000022c 	.word	0x2000022c

080031a0 <_malloc_r>:
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a4:	1ccd      	adds	r5, r1, #3
 80031a6:	f025 0503 	bic.w	r5, r5, #3
 80031aa:	3508      	adds	r5, #8
 80031ac:	2d0c      	cmp	r5, #12
 80031ae:	bf38      	it	cc
 80031b0:	250c      	movcc	r5, #12
 80031b2:	2d00      	cmp	r5, #0
 80031b4:	4606      	mov	r6, r0
 80031b6:	db01      	blt.n	80031bc <_malloc_r+0x1c>
 80031b8:	42a9      	cmp	r1, r5
 80031ba:	d904      	bls.n	80031c6 <_malloc_r+0x26>
 80031bc:	230c      	movs	r3, #12
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	2000      	movs	r0, #0
 80031c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800329c <_malloc_r+0xfc>
 80031ca:	f000 f869 	bl	80032a0 <__malloc_lock>
 80031ce:	f8d8 3000 	ldr.w	r3, [r8]
 80031d2:	461c      	mov	r4, r3
 80031d4:	bb44      	cbnz	r4, 8003228 <_malloc_r+0x88>
 80031d6:	4629      	mov	r1, r5
 80031d8:	4630      	mov	r0, r6
 80031da:	f7ff ffbf 	bl	800315c <sbrk_aligned>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	4604      	mov	r4, r0
 80031e2:	d158      	bne.n	8003296 <_malloc_r+0xf6>
 80031e4:	f8d8 4000 	ldr.w	r4, [r8]
 80031e8:	4627      	mov	r7, r4
 80031ea:	2f00      	cmp	r7, #0
 80031ec:	d143      	bne.n	8003276 <_malloc_r+0xd6>
 80031ee:	2c00      	cmp	r4, #0
 80031f0:	d04b      	beq.n	800328a <_malloc_r+0xea>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	4639      	mov	r1, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	eb04 0903 	add.w	r9, r4, r3
 80031fc:	f000 fb5c 	bl	80038b8 <_sbrk_r>
 8003200:	4581      	cmp	r9, r0
 8003202:	d142      	bne.n	800328a <_malloc_r+0xea>
 8003204:	6821      	ldr	r1, [r4, #0]
 8003206:	1a6d      	subs	r5, r5, r1
 8003208:	4629      	mov	r1, r5
 800320a:	4630      	mov	r0, r6
 800320c:	f7ff ffa6 	bl	800315c <sbrk_aligned>
 8003210:	3001      	adds	r0, #1
 8003212:	d03a      	beq.n	800328a <_malloc_r+0xea>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	442b      	add	r3, r5
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	f8d8 3000 	ldr.w	r3, [r8]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	bb62      	cbnz	r2, 800327c <_malloc_r+0xdc>
 8003222:	f8c8 7000 	str.w	r7, [r8]
 8003226:	e00f      	b.n	8003248 <_malloc_r+0xa8>
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	1b52      	subs	r2, r2, r5
 800322c:	d420      	bmi.n	8003270 <_malloc_r+0xd0>
 800322e:	2a0b      	cmp	r2, #11
 8003230:	d917      	bls.n	8003262 <_malloc_r+0xc2>
 8003232:	1961      	adds	r1, r4, r5
 8003234:	42a3      	cmp	r3, r4
 8003236:	6025      	str	r5, [r4, #0]
 8003238:	bf18      	it	ne
 800323a:	6059      	strne	r1, [r3, #4]
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	bf08      	it	eq
 8003240:	f8c8 1000 	streq.w	r1, [r8]
 8003244:	5162      	str	r2, [r4, r5]
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	4630      	mov	r0, r6
 800324a:	f000 f82f 	bl	80032ac <__malloc_unlock>
 800324e:	f104 000b 	add.w	r0, r4, #11
 8003252:	1d23      	adds	r3, r4, #4
 8003254:	f020 0007 	bic.w	r0, r0, #7
 8003258:	1ac2      	subs	r2, r0, r3
 800325a:	bf1c      	itt	ne
 800325c:	1a1b      	subne	r3, r3, r0
 800325e:	50a3      	strne	r3, [r4, r2]
 8003260:	e7af      	b.n	80031c2 <_malloc_r+0x22>
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	42a3      	cmp	r3, r4
 8003266:	bf0c      	ite	eq
 8003268:	f8c8 2000 	streq.w	r2, [r8]
 800326c:	605a      	strne	r2, [r3, #4]
 800326e:	e7eb      	b.n	8003248 <_malloc_r+0xa8>
 8003270:	4623      	mov	r3, r4
 8003272:	6864      	ldr	r4, [r4, #4]
 8003274:	e7ae      	b.n	80031d4 <_malloc_r+0x34>
 8003276:	463c      	mov	r4, r7
 8003278:	687f      	ldr	r7, [r7, #4]
 800327a:	e7b6      	b.n	80031ea <_malloc_r+0x4a>
 800327c:	461a      	mov	r2, r3
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	42a3      	cmp	r3, r4
 8003282:	d1fb      	bne.n	800327c <_malloc_r+0xdc>
 8003284:	2300      	movs	r3, #0
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	e7de      	b.n	8003248 <_malloc_r+0xa8>
 800328a:	230c      	movs	r3, #12
 800328c:	6033      	str	r3, [r6, #0]
 800328e:	4630      	mov	r0, r6
 8003290:	f000 f80c 	bl	80032ac <__malloc_unlock>
 8003294:	e794      	b.n	80031c0 <_malloc_r+0x20>
 8003296:	6005      	str	r5, [r0, #0]
 8003298:	e7d6      	b.n	8003248 <_malloc_r+0xa8>
 800329a:	bf00      	nop
 800329c:	20000230 	.word	0x20000230

080032a0 <__malloc_lock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	@ (80032a8 <__malloc_lock+0x8>)
 80032a2:	f7ff bf0f 	b.w	80030c4 <__retarget_lock_acquire_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000228 	.word	0x20000228

080032ac <__malloc_unlock>:
 80032ac:	4801      	ldr	r0, [pc, #4]	@ (80032b4 <__malloc_unlock+0x8>)
 80032ae:	f7ff bf0a 	b.w	80030c6 <__retarget_lock_release_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000228 	.word	0x20000228

080032b8 <__ssputs_r>:
 80032b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	688e      	ldr	r6, [r1, #8]
 80032be:	461f      	mov	r7, r3
 80032c0:	42be      	cmp	r6, r7
 80032c2:	680b      	ldr	r3, [r1, #0]
 80032c4:	4682      	mov	sl, r0
 80032c6:	460c      	mov	r4, r1
 80032c8:	4690      	mov	r8, r2
 80032ca:	d82d      	bhi.n	8003328 <__ssputs_r+0x70>
 80032cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032d4:	d026      	beq.n	8003324 <__ssputs_r+0x6c>
 80032d6:	6965      	ldr	r5, [r4, #20]
 80032d8:	6909      	ldr	r1, [r1, #16]
 80032da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032de:	eba3 0901 	sub.w	r9, r3, r1
 80032e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e6:	1c7b      	adds	r3, r7, #1
 80032e8:	444b      	add	r3, r9
 80032ea:	106d      	asrs	r5, r5, #1
 80032ec:	429d      	cmp	r5, r3
 80032ee:	bf38      	it	cc
 80032f0:	461d      	movcc	r5, r3
 80032f2:	0553      	lsls	r3, r2, #21
 80032f4:	d527      	bpl.n	8003346 <__ssputs_r+0x8e>
 80032f6:	4629      	mov	r1, r5
 80032f8:	f7ff ff52 	bl	80031a0 <_malloc_r>
 80032fc:	4606      	mov	r6, r0
 80032fe:	b360      	cbz	r0, 800335a <__ssputs_r+0xa2>
 8003300:	6921      	ldr	r1, [r4, #16]
 8003302:	464a      	mov	r2, r9
 8003304:	f000 fae8 	bl	80038d8 <memcpy>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800330e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	6126      	str	r6, [r4, #16]
 8003316:	6165      	str	r5, [r4, #20]
 8003318:	444e      	add	r6, r9
 800331a:	eba5 0509 	sub.w	r5, r5, r9
 800331e:	6026      	str	r6, [r4, #0]
 8003320:	60a5      	str	r5, [r4, #8]
 8003322:	463e      	mov	r6, r7
 8003324:	42be      	cmp	r6, r7
 8003326:	d900      	bls.n	800332a <__ssputs_r+0x72>
 8003328:	463e      	mov	r6, r7
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	4632      	mov	r2, r6
 800332e:	4641      	mov	r1, r8
 8003330:	f000 faa8 	bl	8003884 <memmove>
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	1b9b      	subs	r3, r3, r6
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	4433      	add	r3, r6
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	2000      	movs	r0, #0
 8003342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003346:	462a      	mov	r2, r5
 8003348:	f000 fad4 	bl	80038f4 <_realloc_r>
 800334c:	4606      	mov	r6, r0
 800334e:	2800      	cmp	r0, #0
 8003350:	d1e0      	bne.n	8003314 <__ssputs_r+0x5c>
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	4650      	mov	r0, sl
 8003356:	f7ff feb7 	bl	80030c8 <_free_r>
 800335a:	230c      	movs	r3, #12
 800335c:	f8ca 3000 	str.w	r3, [sl]
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	e7e9      	b.n	8003342 <__ssputs_r+0x8a>
	...

08003370 <_svfiprintf_r>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	4698      	mov	r8, r3
 8003376:	898b      	ldrh	r3, [r1, #12]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	b09d      	sub	sp, #116	@ 0x74
 800337c:	4607      	mov	r7, r0
 800337e:	460d      	mov	r5, r1
 8003380:	4614      	mov	r4, r2
 8003382:	d510      	bpl.n	80033a6 <_svfiprintf_r+0x36>
 8003384:	690b      	ldr	r3, [r1, #16]
 8003386:	b973      	cbnz	r3, 80033a6 <_svfiprintf_r+0x36>
 8003388:	2140      	movs	r1, #64	@ 0x40
 800338a:	f7ff ff09 	bl	80031a0 <_malloc_r>
 800338e:	6028      	str	r0, [r5, #0]
 8003390:	6128      	str	r0, [r5, #16]
 8003392:	b930      	cbnz	r0, 80033a2 <_svfiprintf_r+0x32>
 8003394:	230c      	movs	r3, #12
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	b01d      	add	sp, #116	@ 0x74
 800339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a2:	2340      	movs	r3, #64	@ 0x40
 80033a4:	616b      	str	r3, [r5, #20]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80033aa:	2320      	movs	r3, #32
 80033ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033b4:	2330      	movs	r3, #48	@ 0x30
 80033b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003554 <_svfiprintf_r+0x1e4>
 80033ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033be:	f04f 0901 	mov.w	r9, #1
 80033c2:	4623      	mov	r3, r4
 80033c4:	469a      	mov	sl, r3
 80033c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ca:	b10a      	cbz	r2, 80033d0 <_svfiprintf_r+0x60>
 80033cc:	2a25      	cmp	r2, #37	@ 0x25
 80033ce:	d1f9      	bne.n	80033c4 <_svfiprintf_r+0x54>
 80033d0:	ebba 0b04 	subs.w	fp, sl, r4
 80033d4:	d00b      	beq.n	80033ee <_svfiprintf_r+0x7e>
 80033d6:	465b      	mov	r3, fp
 80033d8:	4622      	mov	r2, r4
 80033da:	4629      	mov	r1, r5
 80033dc:	4638      	mov	r0, r7
 80033de:	f7ff ff6b 	bl	80032b8 <__ssputs_r>
 80033e2:	3001      	adds	r0, #1
 80033e4:	f000 80a7 	beq.w	8003536 <_svfiprintf_r+0x1c6>
 80033e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033ea:	445a      	add	r2, fp
 80033ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ee:	f89a 3000 	ldrb.w	r3, [sl]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 809f 	beq.w	8003536 <_svfiprintf_r+0x1c6>
 80033f8:	2300      	movs	r3, #0
 80033fa:	f04f 32ff 	mov.w	r2, #4294967295
 80033fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003402:	f10a 0a01 	add.w	sl, sl, #1
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	9307      	str	r3, [sp, #28]
 800340a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800340e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003410:	4654      	mov	r4, sl
 8003412:	2205      	movs	r2, #5
 8003414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003418:	484e      	ldr	r0, [pc, #312]	@ (8003554 <_svfiprintf_r+0x1e4>)
 800341a:	f7fc fee1 	bl	80001e0 <memchr>
 800341e:	9a04      	ldr	r2, [sp, #16]
 8003420:	b9d8      	cbnz	r0, 800345a <_svfiprintf_r+0xea>
 8003422:	06d0      	lsls	r0, r2, #27
 8003424:	bf44      	itt	mi
 8003426:	2320      	movmi	r3, #32
 8003428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800342c:	0711      	lsls	r1, r2, #28
 800342e:	bf44      	itt	mi
 8003430:	232b      	movmi	r3, #43	@ 0x2b
 8003432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003436:	f89a 3000 	ldrb.w	r3, [sl]
 800343a:	2b2a      	cmp	r3, #42	@ 0x2a
 800343c:	d015      	beq.n	800346a <_svfiprintf_r+0xfa>
 800343e:	9a07      	ldr	r2, [sp, #28]
 8003440:	4654      	mov	r4, sl
 8003442:	2000      	movs	r0, #0
 8003444:	f04f 0c0a 	mov.w	ip, #10
 8003448:	4621      	mov	r1, r4
 800344a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800344e:	3b30      	subs	r3, #48	@ 0x30
 8003450:	2b09      	cmp	r3, #9
 8003452:	d94b      	bls.n	80034ec <_svfiprintf_r+0x17c>
 8003454:	b1b0      	cbz	r0, 8003484 <_svfiprintf_r+0x114>
 8003456:	9207      	str	r2, [sp, #28]
 8003458:	e014      	b.n	8003484 <_svfiprintf_r+0x114>
 800345a:	eba0 0308 	sub.w	r3, r0, r8
 800345e:	fa09 f303 	lsl.w	r3, r9, r3
 8003462:	4313      	orrs	r3, r2
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	46a2      	mov	sl, r4
 8003468:	e7d2      	b.n	8003410 <_svfiprintf_r+0xa0>
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	1d19      	adds	r1, r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	9103      	str	r1, [sp, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfbb      	ittet	lt
 8003476:	425b      	neglt	r3, r3
 8003478:	f042 0202 	orrlt.w	r2, r2, #2
 800347c:	9307      	strge	r3, [sp, #28]
 800347e:	9307      	strlt	r3, [sp, #28]
 8003480:	bfb8      	it	lt
 8003482:	9204      	strlt	r2, [sp, #16]
 8003484:	7823      	ldrb	r3, [r4, #0]
 8003486:	2b2e      	cmp	r3, #46	@ 0x2e
 8003488:	d10a      	bne.n	80034a0 <_svfiprintf_r+0x130>
 800348a:	7863      	ldrb	r3, [r4, #1]
 800348c:	2b2a      	cmp	r3, #42	@ 0x2a
 800348e:	d132      	bne.n	80034f6 <_svfiprintf_r+0x186>
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	9203      	str	r2, [sp, #12]
 8003498:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800349c:	3402      	adds	r4, #2
 800349e:	9305      	str	r3, [sp, #20]
 80034a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003564 <_svfiprintf_r+0x1f4>
 80034a4:	7821      	ldrb	r1, [r4, #0]
 80034a6:	2203      	movs	r2, #3
 80034a8:	4650      	mov	r0, sl
 80034aa:	f7fc fe99 	bl	80001e0 <memchr>
 80034ae:	b138      	cbz	r0, 80034c0 <_svfiprintf_r+0x150>
 80034b0:	9b04      	ldr	r3, [sp, #16]
 80034b2:	eba0 000a 	sub.w	r0, r0, sl
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	4082      	lsls	r2, r0
 80034ba:	4313      	orrs	r3, r2
 80034bc:	3401      	adds	r4, #1
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c4:	4824      	ldr	r0, [pc, #144]	@ (8003558 <_svfiprintf_r+0x1e8>)
 80034c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ca:	2206      	movs	r2, #6
 80034cc:	f7fc fe88 	bl	80001e0 <memchr>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d036      	beq.n	8003542 <_svfiprintf_r+0x1d2>
 80034d4:	4b21      	ldr	r3, [pc, #132]	@ (800355c <_svfiprintf_r+0x1ec>)
 80034d6:	bb1b      	cbnz	r3, 8003520 <_svfiprintf_r+0x1b0>
 80034d8:	9b03      	ldr	r3, [sp, #12]
 80034da:	3307      	adds	r3, #7
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	3308      	adds	r3, #8
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e6:	4433      	add	r3, r6
 80034e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ea:	e76a      	b.n	80033c2 <_svfiprintf_r+0x52>
 80034ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80034f0:	460c      	mov	r4, r1
 80034f2:	2001      	movs	r0, #1
 80034f4:	e7a8      	b.n	8003448 <_svfiprintf_r+0xd8>
 80034f6:	2300      	movs	r3, #0
 80034f8:	3401      	adds	r4, #1
 80034fa:	9305      	str	r3, [sp, #20]
 80034fc:	4619      	mov	r1, r3
 80034fe:	f04f 0c0a 	mov.w	ip, #10
 8003502:	4620      	mov	r0, r4
 8003504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003508:	3a30      	subs	r2, #48	@ 0x30
 800350a:	2a09      	cmp	r2, #9
 800350c:	d903      	bls.n	8003516 <_svfiprintf_r+0x1a6>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c6      	beq.n	80034a0 <_svfiprintf_r+0x130>
 8003512:	9105      	str	r1, [sp, #20]
 8003514:	e7c4      	b.n	80034a0 <_svfiprintf_r+0x130>
 8003516:	fb0c 2101 	mla	r1, ip, r1, r2
 800351a:	4604      	mov	r4, r0
 800351c:	2301      	movs	r3, #1
 800351e:	e7f0      	b.n	8003502 <_svfiprintf_r+0x192>
 8003520:	ab03      	add	r3, sp, #12
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	462a      	mov	r2, r5
 8003526:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <_svfiprintf_r+0x1f0>)
 8003528:	a904      	add	r1, sp, #16
 800352a:	4638      	mov	r0, r7
 800352c:	f3af 8000 	nop.w
 8003530:	1c42      	adds	r2, r0, #1
 8003532:	4606      	mov	r6, r0
 8003534:	d1d6      	bne.n	80034e4 <_svfiprintf_r+0x174>
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	065b      	lsls	r3, r3, #25
 800353a:	f53f af2d 	bmi.w	8003398 <_svfiprintf_r+0x28>
 800353e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003540:	e72c      	b.n	800339c <_svfiprintf_r+0x2c>
 8003542:	ab03      	add	r3, sp, #12
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	462a      	mov	r2, r5
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <_svfiprintf_r+0x1f0>)
 800354a:	a904      	add	r1, sp, #16
 800354c:	4638      	mov	r0, r7
 800354e:	f000 f879 	bl	8003644 <_printf_i>
 8003552:	e7ed      	b.n	8003530 <_svfiprintf_r+0x1c0>
 8003554:	08003a38 	.word	0x08003a38
 8003558:	08003a42 	.word	0x08003a42
 800355c:	00000000 	.word	0x00000000
 8003560:	080032b9 	.word	0x080032b9
 8003564:	08003a3e 	.word	0x08003a3e

08003568 <_printf_common>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4616      	mov	r6, r2
 800356e:	4698      	mov	r8, r3
 8003570:	688a      	ldr	r2, [r1, #8]
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003578:	4293      	cmp	r3, r2
 800357a:	bfb8      	it	lt
 800357c:	4613      	movlt	r3, r2
 800357e:	6033      	str	r3, [r6, #0]
 8003580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003584:	4607      	mov	r7, r0
 8003586:	460c      	mov	r4, r1
 8003588:	b10a      	cbz	r2, 800358e <_printf_common+0x26>
 800358a:	3301      	adds	r3, #1
 800358c:	6033      	str	r3, [r6, #0]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	0699      	lsls	r1, r3, #26
 8003592:	bf42      	ittt	mi
 8003594:	6833      	ldrmi	r3, [r6, #0]
 8003596:	3302      	addmi	r3, #2
 8003598:	6033      	strmi	r3, [r6, #0]
 800359a:	6825      	ldr	r5, [r4, #0]
 800359c:	f015 0506 	ands.w	r5, r5, #6
 80035a0:	d106      	bne.n	80035b0 <_printf_common+0x48>
 80035a2:	f104 0a19 	add.w	sl, r4, #25
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	6832      	ldr	r2, [r6, #0]
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dc26      	bgt.n	80035fe <_printf_common+0x96>
 80035b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	3b00      	subs	r3, #0
 80035b8:	bf18      	it	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	0692      	lsls	r2, r2, #26
 80035be:	d42b      	bmi.n	8003618 <_printf_common+0xb0>
 80035c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035c4:	4641      	mov	r1, r8
 80035c6:	4638      	mov	r0, r7
 80035c8:	47c8      	blx	r9
 80035ca:	3001      	adds	r0, #1
 80035cc:	d01e      	beq.n	800360c <_printf_common+0xa4>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf02      	ittt	eq
 80035da:	68e5      	ldreq	r5, [r4, #12]
 80035dc:	6833      	ldreq	r3, [r6, #0]
 80035de:	1aed      	subeq	r5, r5, r3
 80035e0:	68a3      	ldr	r3, [r4, #8]
 80035e2:	bf0c      	ite	eq
 80035e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e8:	2500      	movne	r5, #0
 80035ea:	4293      	cmp	r3, r2
 80035ec:	bfc4      	itt	gt
 80035ee:	1a9b      	subgt	r3, r3, r2
 80035f0:	18ed      	addgt	r5, r5, r3
 80035f2:	2600      	movs	r6, #0
 80035f4:	341a      	adds	r4, #26
 80035f6:	42b5      	cmp	r5, r6
 80035f8:	d11a      	bne.n	8003630 <_printf_common+0xc8>
 80035fa:	2000      	movs	r0, #0
 80035fc:	e008      	b.n	8003610 <_printf_common+0xa8>
 80035fe:	2301      	movs	r3, #1
 8003600:	4652      	mov	r2, sl
 8003602:	4641      	mov	r1, r8
 8003604:	4638      	mov	r0, r7
 8003606:	47c8      	blx	r9
 8003608:	3001      	adds	r0, #1
 800360a:	d103      	bne.n	8003614 <_printf_common+0xac>
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003614:	3501      	adds	r5, #1
 8003616:	e7c6      	b.n	80035a6 <_printf_common+0x3e>
 8003618:	18e1      	adds	r1, r4, r3
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	2030      	movs	r0, #48	@ 0x30
 800361e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003622:	4422      	add	r2, r4
 8003624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800362c:	3302      	adds	r3, #2
 800362e:	e7c7      	b.n	80035c0 <_printf_common+0x58>
 8003630:	2301      	movs	r3, #1
 8003632:	4622      	mov	r2, r4
 8003634:	4641      	mov	r1, r8
 8003636:	4638      	mov	r0, r7
 8003638:	47c8      	blx	r9
 800363a:	3001      	adds	r0, #1
 800363c:	d0e6      	beq.n	800360c <_printf_common+0xa4>
 800363e:	3601      	adds	r6, #1
 8003640:	e7d9      	b.n	80035f6 <_printf_common+0x8e>
	...

08003644 <_printf_i>:
 8003644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	7e0f      	ldrb	r7, [r1, #24]
 800364a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800364c:	2f78      	cmp	r7, #120	@ 0x78
 800364e:	4691      	mov	r9, r2
 8003650:	4680      	mov	r8, r0
 8003652:	460c      	mov	r4, r1
 8003654:	469a      	mov	sl, r3
 8003656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800365a:	d807      	bhi.n	800366c <_printf_i+0x28>
 800365c:	2f62      	cmp	r7, #98	@ 0x62
 800365e:	d80a      	bhi.n	8003676 <_printf_i+0x32>
 8003660:	2f00      	cmp	r7, #0
 8003662:	f000 80d2 	beq.w	800380a <_printf_i+0x1c6>
 8003666:	2f58      	cmp	r7, #88	@ 0x58
 8003668:	f000 80b9 	beq.w	80037de <_printf_i+0x19a>
 800366c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003674:	e03a      	b.n	80036ec <_printf_i+0xa8>
 8003676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800367a:	2b15      	cmp	r3, #21
 800367c:	d8f6      	bhi.n	800366c <_printf_i+0x28>
 800367e:	a101      	add	r1, pc, #4	@ (adr r1, 8003684 <_printf_i+0x40>)
 8003680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036f1 	.word	0x080036f1
 800368c:	0800366d 	.word	0x0800366d
 8003690:	0800366d 	.word	0x0800366d
 8003694:	0800366d 	.word	0x0800366d
 8003698:	0800366d 	.word	0x0800366d
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	0800366d 	.word	0x0800366d
 80036a4:	0800366d 	.word	0x0800366d
 80036a8:	0800366d 	.word	0x0800366d
 80036ac:	0800366d 	.word	0x0800366d
 80036b0:	080037f1 	.word	0x080037f1
 80036b4:	0800371b 	.word	0x0800371b
 80036b8:	080037ab 	.word	0x080037ab
 80036bc:	0800366d 	.word	0x0800366d
 80036c0:	0800366d 	.word	0x0800366d
 80036c4:	08003813 	.word	0x08003813
 80036c8:	0800366d 	.word	0x0800366d
 80036cc:	0800371b 	.word	0x0800371b
 80036d0:	0800366d 	.word	0x0800366d
 80036d4:	0800366d 	.word	0x0800366d
 80036d8:	080037b3 	.word	0x080037b3
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6032      	str	r2, [r6, #0]
 80036e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036ec:	2301      	movs	r3, #1
 80036ee:	e09d      	b.n	800382c <_printf_i+0x1e8>
 80036f0:	6833      	ldr	r3, [r6, #0]
 80036f2:	6820      	ldr	r0, [r4, #0]
 80036f4:	1d19      	adds	r1, r3, #4
 80036f6:	6031      	str	r1, [r6, #0]
 80036f8:	0606      	lsls	r6, r0, #24
 80036fa:	d501      	bpl.n	8003700 <_printf_i+0xbc>
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	e003      	b.n	8003708 <_printf_i+0xc4>
 8003700:	0645      	lsls	r5, r0, #25
 8003702:	d5fb      	bpl.n	80036fc <_printf_i+0xb8>
 8003704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003708:	2d00      	cmp	r5, #0
 800370a:	da03      	bge.n	8003714 <_printf_i+0xd0>
 800370c:	232d      	movs	r3, #45	@ 0x2d
 800370e:	426d      	negs	r5, r5
 8003710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003714:	4859      	ldr	r0, [pc, #356]	@ (800387c <_printf_i+0x238>)
 8003716:	230a      	movs	r3, #10
 8003718:	e011      	b.n	800373e <_printf_i+0xfa>
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	0608      	lsls	r0, r1, #24
 8003720:	f853 5b04 	ldr.w	r5, [r3], #4
 8003724:	d402      	bmi.n	800372c <_printf_i+0xe8>
 8003726:	0649      	lsls	r1, r1, #25
 8003728:	bf48      	it	mi
 800372a:	b2ad      	uxthmi	r5, r5
 800372c:	2f6f      	cmp	r7, #111	@ 0x6f
 800372e:	4853      	ldr	r0, [pc, #332]	@ (800387c <_printf_i+0x238>)
 8003730:	6033      	str	r3, [r6, #0]
 8003732:	bf14      	ite	ne
 8003734:	230a      	movne	r3, #10
 8003736:	2308      	moveq	r3, #8
 8003738:	2100      	movs	r1, #0
 800373a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800373e:	6866      	ldr	r6, [r4, #4]
 8003740:	60a6      	str	r6, [r4, #8]
 8003742:	2e00      	cmp	r6, #0
 8003744:	bfa2      	ittt	ge
 8003746:	6821      	ldrge	r1, [r4, #0]
 8003748:	f021 0104 	bicge.w	r1, r1, #4
 800374c:	6021      	strge	r1, [r4, #0]
 800374e:	b90d      	cbnz	r5, 8003754 <_printf_i+0x110>
 8003750:	2e00      	cmp	r6, #0
 8003752:	d04b      	beq.n	80037ec <_printf_i+0x1a8>
 8003754:	4616      	mov	r6, r2
 8003756:	fbb5 f1f3 	udiv	r1, r5, r3
 800375a:	fb03 5711 	mls	r7, r3, r1, r5
 800375e:	5dc7      	ldrb	r7, [r0, r7]
 8003760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003764:	462f      	mov	r7, r5
 8003766:	42bb      	cmp	r3, r7
 8003768:	460d      	mov	r5, r1
 800376a:	d9f4      	bls.n	8003756 <_printf_i+0x112>
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10b      	bne.n	8003788 <_printf_i+0x144>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	07df      	lsls	r7, r3, #31
 8003774:	d508      	bpl.n	8003788 <_printf_i+0x144>
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	6861      	ldr	r1, [r4, #4]
 800377a:	4299      	cmp	r1, r3
 800377c:	bfde      	ittt	le
 800377e:	2330      	movle	r3, #48	@ 0x30
 8003780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003788:	1b92      	subs	r2, r2, r6
 800378a:	6122      	str	r2, [r4, #16]
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	464b      	mov	r3, r9
 8003792:	aa03      	add	r2, sp, #12
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff fee6 	bl	8003568 <_printf_common>
 800379c:	3001      	adds	r0, #1
 800379e:	d14a      	bne.n	8003836 <_printf_i+0x1f2>
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	b004      	add	sp, #16
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	4833      	ldr	r0, [pc, #204]	@ (8003880 <_printf_i+0x23c>)
 80037b4:	2778      	movs	r7, #120	@ 0x78
 80037b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	6831      	ldr	r1, [r6, #0]
 80037be:	061f      	lsls	r7, r3, #24
 80037c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c4:	d402      	bmi.n	80037cc <_printf_i+0x188>
 80037c6:	065f      	lsls	r7, r3, #25
 80037c8:	bf48      	it	mi
 80037ca:	b2ad      	uxthmi	r5, r5
 80037cc:	6031      	str	r1, [r6, #0]
 80037ce:	07d9      	lsls	r1, r3, #31
 80037d0:	bf44      	itt	mi
 80037d2:	f043 0320 	orrmi.w	r3, r3, #32
 80037d6:	6023      	strmi	r3, [r4, #0]
 80037d8:	b11d      	cbz	r5, 80037e2 <_printf_i+0x19e>
 80037da:	2310      	movs	r3, #16
 80037dc:	e7ac      	b.n	8003738 <_printf_i+0xf4>
 80037de:	4827      	ldr	r0, [pc, #156]	@ (800387c <_printf_i+0x238>)
 80037e0:	e7e9      	b.n	80037b6 <_printf_i+0x172>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f023 0320 	bic.w	r3, r3, #32
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	e7f6      	b.n	80037da <_printf_i+0x196>
 80037ec:	4616      	mov	r6, r2
 80037ee:	e7bd      	b.n	800376c <_printf_i+0x128>
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	6825      	ldr	r5, [r4, #0]
 80037f4:	6961      	ldr	r1, [r4, #20]
 80037f6:	1d18      	adds	r0, r3, #4
 80037f8:	6030      	str	r0, [r6, #0]
 80037fa:	062e      	lsls	r6, r5, #24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	d501      	bpl.n	8003804 <_printf_i+0x1c0>
 8003800:	6019      	str	r1, [r3, #0]
 8003802:	e002      	b.n	800380a <_printf_i+0x1c6>
 8003804:	0668      	lsls	r0, r5, #25
 8003806:	d5fb      	bpl.n	8003800 <_printf_i+0x1bc>
 8003808:	8019      	strh	r1, [r3, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	4616      	mov	r6, r2
 8003810:	e7bc      	b.n	800378c <_printf_i+0x148>
 8003812:	6833      	ldr	r3, [r6, #0]
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	6032      	str	r2, [r6, #0]
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	2100      	movs	r1, #0
 800381e:	4630      	mov	r0, r6
 8003820:	f7fc fcde 	bl	80001e0 <memchr>
 8003824:	b108      	cbz	r0, 800382a <_printf_i+0x1e6>
 8003826:	1b80      	subs	r0, r0, r6
 8003828:	6060      	str	r0, [r4, #4]
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	6123      	str	r3, [r4, #16]
 800382e:	2300      	movs	r3, #0
 8003830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003834:	e7aa      	b.n	800378c <_printf_i+0x148>
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	4632      	mov	r2, r6
 800383a:	4649      	mov	r1, r9
 800383c:	4640      	mov	r0, r8
 800383e:	47d0      	blx	sl
 8003840:	3001      	adds	r0, #1
 8003842:	d0ad      	beq.n	80037a0 <_printf_i+0x15c>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	079b      	lsls	r3, r3, #30
 8003848:	d413      	bmi.n	8003872 <_printf_i+0x22e>
 800384a:	68e0      	ldr	r0, [r4, #12]
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	4298      	cmp	r0, r3
 8003850:	bfb8      	it	lt
 8003852:	4618      	movlt	r0, r3
 8003854:	e7a6      	b.n	80037a4 <_printf_i+0x160>
 8003856:	2301      	movs	r3, #1
 8003858:	4632      	mov	r2, r6
 800385a:	4649      	mov	r1, r9
 800385c:	4640      	mov	r0, r8
 800385e:	47d0      	blx	sl
 8003860:	3001      	adds	r0, #1
 8003862:	d09d      	beq.n	80037a0 <_printf_i+0x15c>
 8003864:	3501      	adds	r5, #1
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	9903      	ldr	r1, [sp, #12]
 800386a:	1a5b      	subs	r3, r3, r1
 800386c:	42ab      	cmp	r3, r5
 800386e:	dcf2      	bgt.n	8003856 <_printf_i+0x212>
 8003870:	e7eb      	b.n	800384a <_printf_i+0x206>
 8003872:	2500      	movs	r5, #0
 8003874:	f104 0619 	add.w	r6, r4, #25
 8003878:	e7f5      	b.n	8003866 <_printf_i+0x222>
 800387a:	bf00      	nop
 800387c:	08003a49 	.word	0x08003a49
 8003880:	08003a5a 	.word	0x08003a5a

08003884 <memmove>:
 8003884:	4288      	cmp	r0, r1
 8003886:	b510      	push	{r4, lr}
 8003888:	eb01 0402 	add.w	r4, r1, r2
 800388c:	d902      	bls.n	8003894 <memmove+0x10>
 800388e:	4284      	cmp	r4, r0
 8003890:	4623      	mov	r3, r4
 8003892:	d807      	bhi.n	80038a4 <memmove+0x20>
 8003894:	1e43      	subs	r3, r0, #1
 8003896:	42a1      	cmp	r1, r4
 8003898:	d008      	beq.n	80038ac <memmove+0x28>
 800389a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800389e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038a2:	e7f8      	b.n	8003896 <memmove+0x12>
 80038a4:	4402      	add	r2, r0
 80038a6:	4601      	mov	r1, r0
 80038a8:	428a      	cmp	r2, r1
 80038aa:	d100      	bne.n	80038ae <memmove+0x2a>
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038b6:	e7f7      	b.n	80038a8 <memmove+0x24>

080038b8 <_sbrk_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d06      	ldr	r5, [pc, #24]	@ (80038d4 <_sbrk_r+0x1c>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	f7fd fa12 	bl	8000cec <_sbrk>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_sbrk_r+0x1a>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_sbrk_r+0x1a>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	20000224 	.word	0x20000224

080038d8 <memcpy>:
 80038d8:	440a      	add	r2, r1
 80038da:	4291      	cmp	r1, r2
 80038dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80038e0:	d100      	bne.n	80038e4 <memcpy+0xc>
 80038e2:	4770      	bx	lr
 80038e4:	b510      	push	{r4, lr}
 80038e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ee:	4291      	cmp	r1, r2
 80038f0:	d1f9      	bne.n	80038e6 <memcpy+0xe>
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <_realloc_r>:
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	4680      	mov	r8, r0
 80038fa:	4615      	mov	r5, r2
 80038fc:	460c      	mov	r4, r1
 80038fe:	b921      	cbnz	r1, 800390a <_realloc_r+0x16>
 8003900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4611      	mov	r1, r2
 8003906:	f7ff bc4b 	b.w	80031a0 <_malloc_r>
 800390a:	b92a      	cbnz	r2, 8003918 <_realloc_r+0x24>
 800390c:	f7ff fbdc 	bl	80030c8 <_free_r>
 8003910:	2400      	movs	r4, #0
 8003912:	4620      	mov	r0, r4
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003918:	f000 f81a 	bl	8003950 <_malloc_usable_size_r>
 800391c:	4285      	cmp	r5, r0
 800391e:	4606      	mov	r6, r0
 8003920:	d802      	bhi.n	8003928 <_realloc_r+0x34>
 8003922:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003926:	d8f4      	bhi.n	8003912 <_realloc_r+0x1e>
 8003928:	4629      	mov	r1, r5
 800392a:	4640      	mov	r0, r8
 800392c:	f7ff fc38 	bl	80031a0 <_malloc_r>
 8003930:	4607      	mov	r7, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d0ec      	beq.n	8003910 <_realloc_r+0x1c>
 8003936:	42b5      	cmp	r5, r6
 8003938:	462a      	mov	r2, r5
 800393a:	4621      	mov	r1, r4
 800393c:	bf28      	it	cs
 800393e:	4632      	movcs	r2, r6
 8003940:	f7ff ffca 	bl	80038d8 <memcpy>
 8003944:	4621      	mov	r1, r4
 8003946:	4640      	mov	r0, r8
 8003948:	f7ff fbbe 	bl	80030c8 <_free_r>
 800394c:	463c      	mov	r4, r7
 800394e:	e7e0      	b.n	8003912 <_realloc_r+0x1e>

08003950 <_malloc_usable_size_r>:
 8003950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003954:	1f18      	subs	r0, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	bfbc      	itt	lt
 800395a:	580b      	ldrlt	r3, [r1, r0]
 800395c:	18c0      	addlt	r0, r0, r3
 800395e:	4770      	bx	lr

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
